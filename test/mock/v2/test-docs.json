{
    "swagger": "2.0",
    "info": { "version": "v1", "title": "Trisoft.InfoShare.Web" },
    "host": "localhost:40470",
    "basePath": "/infoshareauthor",
    "schemes": ["https"],
    "paths": {
        "/Api/Annotations/Form/": {
            "get": {
                "tags": ["Annotations"],
                "summary": "Gets a new annotation creation form for a content object specified in parameters.",
                "operationId": "GetCreateForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The form identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "Name of the client.",
                        "required": false,
                        "type": "string"
                    },
                    { "name": "param.publicationId", "in": "query", "required": false, "type": "string" },
                    { "name": "param.publicationVersion", "in": "query", "required": false, "type": "string" },
                    { "name": "param.revisionId", "in": "query", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/Annotations/": {
            "put": {
                "tags": ["Annotations"],
                "summary": "Updates multiple annotations",
                "operationId": "Update",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameter",
                        "in": "body",
                        "description": "List of request objects (annotationId and metadata) that needs to be updated and the requested fields",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationMultipleUpdateRequestParameter" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/AnnotationUpdateResponse" } }
                    }
                }
            },
            "post": {
                "tags": ["Annotations"],
                "summary": "Creates an annotation specified by {param} with the specified metadata.",
                "operationId": "Create",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "request",
                        "in": "body",
                        "description": "Contains information related with annotation to be created.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationRequest" }
                    },
                    { "name": "param.publicationId", "in": "query", "required": false, "type": "string" },
                    { "name": "param.publicationVersion", "in": "query", "required": false, "type": "string" },
                    { "name": "param.revisionId", "in": "query", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Annotations/{annotationId}/Form/": {
            "get": {
                "tags": ["Annotations"],
                "summary": "Gets a form to update an annotation by the given id.",
                "operationId": "GetUpdateForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "annotationId", "in": "path", "description": "Annotation Id", "required": true, "type": "string" },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The form identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "Name of the client.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/Annotations/{annotationId}/": {
            "put": {
                "tags": ["Annotations"],
                "summary": "Updates the annotation specified by {annotationId} with the specified metadata.",
                "description": "The parameter {metadata} can only contain fields of annotation level.",
                "operationId": "Update",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "description": "The card identifier of the annotation.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "request",
                        "in": "body",
                        "description": "Optional. Metadata containing a collection of {Trisoft.InfoShare.XAPI.Models.FieldValue} instances that will be set on the annotation.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationRequest" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/AnnotationMetadata" } } }
            },
            "delete": {
                "tags": ["Annotations"],
                "summary": "Deletes an annotation by the given annotation id.",
                "description": "Requirements are: \r\nThe user must have write access for the folder in which the object that has annotation with ID.",
                "operationId": "Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "annotationId", "in": "path", "description": "annotation ID", "required": true, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/Annotations/Details/": {
            "post": {
                "tags": ["Annotations"],
                "summary": "Gets the values of requested fields for given annotations ids.",
                "operationId": "GetDetails",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameter",
                        "in": "body",
                        "description": "Contains information about the desired annotation ids and requested fields.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationDetailParameters" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/AnnotationMetadata" } }
                    }
                }
            }
        },
        "/Api/Annotations/List/": {
            "post": {
                "tags": ["Annotations"],
                "summary": "Gets the values of requested fields for given filters.",
                "operationId": "List",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameter",
                        "in": "body",
                        "description": "Contains information about the desired publication, metadata filtters and requested fields.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationListParameters" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/AnnotationMetadata" } }
                    }
                }
            }
        },
        "/Api/Annotations/{annotationId}/Replies/{annotationReplyId}/": {
            "put": {
                "tags": ["Annotations"],
                "summary": "Updates the reply.",
                "operationId": "UpdateReply",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "description": "The annotation identifier.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "annotationReplyId", "in": "path", "required": true, "type": "integer", "format": "int64" },
                    {
                        "name": "annotationReplyRequest",
                        "in": "body",
                        "description": "The metadata that holds the detail of the annotation reply and requested metadata fields",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationRequest" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/AnnotationMetadata" } } }
            },
            "delete": {
                "tags": ["Annotations"],
                "summary": "Deletes the reply.",
                "operationId": "DeleteReply",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "description": "The annotation identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "annotationReplyId",
                        "in": "path",
                        "description": "The annotation reply identifier.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "requestedMetadata",
                        "in": "body",
                        "description": "The metadata that holds requested metadata fields",
                        "required": true,
                        "schema": { "$ref": "#/definitions/RequestedMetadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/AnnotationMetadata" } } }
            }
        },
        "/Api/Annotations/{annotationId}/Replies/": {
            "post": {
                "tags": ["Annotations"],
                "summary": "Creates the reply.",
                "operationId": "CreateReply",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "annotationId",
                        "in": "path",
                        "description": "The annotation identifier.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "annotationReplyRequest",
                        "in": "body",
                        "description": "The metadata that holds the detail of the annotation reply and requested metadata fields",
                        "required": true,
                        "schema": { "$ref": "#/definitions/AnnotationRequest" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/AnnotationMetadata" } } }
            }
        },
        "/Api/Comments/DeleteMultipleById/": {
            "post": {
                "tags": ["Comments"],
                "summary": "Deletes the multiple comments by identifier.",
                "operationId": "DeleteMultipleById",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "body",
                        "description": "The ids.",
                        "required": true,
                        "schema": { "type": "array", "items": { "format": "int64", "type": "integer" } }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "format": "int64", "type": "integer" } }
                    }
                }
            }
        },
        "/Api/Comments/Users/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Get users for the given parameters",
                "operationId": "GetUsers",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": {
                    "200": { "description": "OK", "schema": { "type": "array", "items": { "$ref": "#/definitions/User" } } }
                }
            }
        },
        "/Api/Comments/Languages/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Gets comment languages",
                "operationId": "GetLanguages",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "type": "array", "items": { "type": "string" } } } }
            }
        },
        "/Api/Comments/Publications/{language}/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Gets the publications.",
                "operationId": "GetPublications",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "language", "in": "path", "description": "The language.", "required": true, "type": "string" }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/Publication" } }
                    }
                }
            }
        },
        "/Api/Comments/Statuses/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Gets comment statuses",
                "operationId": "GetStatuses",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": {
                    "200": { "description": "OK", "schema": { "type": "array", "items": { "$ref": "#/definitions/Status" } } }
                }
            }
        },
        "/api/Comments/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Get comments for the given parameters",
                "operationId": "Get",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Start date for filtering.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "End date for filtering.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "skipDate",
                        "in": "query",
                        "description": "The skip date needed by date based paging.",
                        "required": false,
                        "type": "string",
                        "format": "date-time"
                    },
                    {
                        "name": "publicationId",
                        "in": "query",
                        "description": "The publication identifier.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    { "name": "status", "in": "query", "description": "The status.", "required": false, "type": "string" },
                    {
                        "name": "userId",
                        "in": "query",
                        "description": "The user identifier.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "top",
                        "in": "query",
                        "description": "The top.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "skip",
                        "in": "query",
                        "description": "The skip.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/CommentingResult" } } }
            },
            "post": {
                "tags": ["Comments"],
                "summary": "Posts the specified value.",
                "operationId": "Post",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "value",
                        "in": "body",
                        "description": "The value.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Comment" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Comment" } } }
            }
        },
        "/api/Comments/{id}/": {
            "get": {
                "tags": ["Comments"],
                "summary": "Gets the specified identifier.",
                "operationId": "Get",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Comment" } } }
            },
            "put": {
                "tags": ["Comments"],
                "summary": "Puts the specified identifier.",
                "operationId": "Put",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The identifier.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "value",
                        "in": "body",
                        "description": "The value.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Comment" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Comment" } } }
            },
            "delete": {
                "tags": ["Comments"],
                "summary": "Deletes the comment.",
                "operationId": "Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "The comment identifier.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/ContentObjects/": {
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Creates a new content object in the specified folder.",
                "description": "<para>The metadata that will be set on the content object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can contain fields of all levels (logical, version, language).</para>\r\n<para>The logical identifier can explicitly be added to the metadata.</para>\r\n<para>The version cannot be added to the metadata. By default, it is set to 1.</para>\r\n<para>The language and resolution can explicitly be added to the metadata. If the language is not provided by the metadata the default language will be used (language on user card). If the resolution is not provided by the metadata the default resolution will be used (resolution on settings card).</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "CreateObject",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create the new content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "data", "in": "formData", "required": false, "type": "File" },
                    { "name": "metadata", "in": "formData", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/{folderCardId}/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets a new content object in the specified folder.",
                "operationId": "GetCreateObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The card identifier of the folder where to create the new content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "referenceLanguageCardId", "in": "query", "required": true, "type": "integer", "format": "int64" },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "Form id in metadata xml",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The | seperated list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            },
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Creates a new content object in the specified folder.",
                "description": "<para>The metadata that will be set on the content object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can contain fields of all levels (logical, version, language).</para>\r\n<para>The logical identifier can explicitly be added to the metadata.</para>\r\n<para>The version cannot be added to the metadata. By default, it is set to 1.</para>\r\n<para>The fields are inherited from the editor template or reference object specified by {referenceLanguageCardId}. If the language or resolution is provided by the metadata, they have to be equal to the language or resolution of the editor template or reference object.</para>\r\n<para>Content cannot be uploaded. A multipart body is not supported.</para>",
                "operationId": "Create",
                "consumes": ["multipart/form-data"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The card identifier of the folder where to create the new content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "referenceLanguageCardId",
                        "in": "query",
                        "description": "The editor template card id or reference language card id that can be used to retrieve the data object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "formId", "in": "query", "required": false, "type": "string" },
                    { "name": "clientNames", "in": "query", "required": false, "type": "string" },
                    { "name": "data", "in": "formData", "required": false, "type": "File" },
                    { "name": "metadata", "in": "formData", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/LanguageCard/{languageCardId}/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets a form containing definition and values needed to generate a form to update an existing object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object. The card identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The | seperated list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            },
            "put": {
                "tags": ["ContentObjects"],
                "summary": "Updates the content object specified by {languageCardId}.",
                "description": "<para>The metadata that will be set on the content object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can contain fields of all levels (logical, version, language).</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "Update",
                "consumes": ["multipart/form-data"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "data", "in": "formData", "required": false, "type": "File" },
                    { "name": "metadata", "in": "formData", "required": false, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/ContentObjects/LanguageCard/{languageCardId}/CheckIn/": {
            "get": {
                "tags": ["ContentObjects"],
                "operationId": "GetCheckinObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "languageCardId", "in": "path", "required": true, "type": "integer", "format": "int64" },
                    { "name": "formId", "in": "query", "required": false, "type": "string" },
                    { "name": "clientName", "in": "query", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            },
            "put": {
                "tags": ["ContentObjects"],
                "summary": "Checks in the content object specified by {languageCardId}.",
                "description": "<para>The metadata that will be set on the content object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can contain fields of all levels (logical, version, language).</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "Checkin",
                "consumes": ["multipart/form-data"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "keepCheckedOut", "in": "query", "required": false, "type": "boolean" },
                    { "name": "data", "in": "formData", "required": false, "type": "File" },
                    { "name": "metadata", "in": "formData", "required": false, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/ContentObjects/{logicalId}/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets a form containing definition and values needed to generate a form to update an existing logical object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLogicalObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The logical identifier of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the version object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The | seperated list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            },
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Creates a new version object in the specified logical object.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>The version can explicitly be added to the metadata. If the version is not provided by the metadatas the version will be generated by calculating the next free version number on the main branch for the specified logical object (e.g. 3.1.2 -&gt; 4).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object where to create the new version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/{logicalId}/Version/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new version object.",
                "description": "<para>The {fromVersion} is optional. By default, a new version number will be generated.</para>\r\n<para>The {doBranch} is optional. By default, a new version number will be generated.</para>\r\n<para>The {formId} is optional. By default, \"Properties_NewVersion_'ObjectType'\" is used.</para>",
                "operationId": "GetCreateVersionObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object where to create the new version object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referenceLanguageCardId",
                        "in": "query",
                        "description": "Card identifier of the language object that the method prefills the form.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The | seperated list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/ContentObjects/{logicalId}/DefaultMetadata/": {
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Creates a new version object (fills the required metadata fields with latest version's default language object field values).",
                "operationId": "CreateVersionObjectWithDefaultMetadata",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object where to create the new version object with language and update logical level fields.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientNames",
                        "in": "query",
                        "description": "The list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/DocumentObjDescriptor" } } }
            }
        },
        "/Api/ContentObjects/DefaultLanguageCardId/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets the language card id of the default language for related logicalId.",
                "operationId": "GetDefaultLanguageCardId",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "Version of the object to create version.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of the object to create language.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "format": "int64", "type": "integer" } } }
            }
        },
        "/Api/ContentObjects/{logicalId}/Version/{version}/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new version object.",
                "description": "<para>The {formId} is optional. By default, \"Properties_Create_'ObjectType'\" is used.</para>",
                "operationId": "GetCreateLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object where to create the new version object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referenceLanguageCardId",
                        "in": "query",
                        "description": "Card identifier of the language object that the method prefills the form.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The | seperated list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            },
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Creates a new version object in the specified logical object.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>The version can explicitly be added to the metadata. If the version is not provided by the metadatas the version will be generated by calculating the next free version number on the main branch for the specified logical object (e.g. 3.1.2 -&gt; 4).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateLanguageObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object where to create the new version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/RevisionObject/{revisionId}/Content/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Get XML content for a document",
                "operationId": "GetContent",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "revisionId",
                        "in": "path",
                        "description": "RevisionId Id of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "includeByteOrderMark",
                        "in": "query",
                        "description": "Whether to include a Byte Order Mark at the beginning of the Stream",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/InContext/Metadata/": {
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Gets the metadata for the given logical id matching the versions specified in the baseline for the given publication version",
                "operationId": "GetInContextMetadata",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "InContextMetadataParameters with the parameters for the call including:\r\n            Logical Id of the publication, Version of the publication, Logical Ids of the documents or images, Requested metadata, Language and KeepOrder\r\n            When null, the working language of the publication is used.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/InContextMetadataParameters" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ContentObjectMetadata" } }
                    }
                }
            }
        },
        "/Api/ContentObjects/InContext/Content/": {
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Gets the content for the given logical id matching the versions specified in the baseline for the given publication version",
                "operationId": "GetInContextContent",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "InContextContentParameters with the parameters for the call including:\r\n            Logical Id of the publication, Version of the publication, revision id of root map of publication, Language, Resolution and IgnoreNavigationTitles flag\r\n            When null, the working language of the publication is used.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/InContextContentParameters" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ContentObjects/InContext/VariableAssignments/": {
            "post": {
                "tags": ["ContentObjects"],
                "summary": "Gets the metadata and variable assignments for the given publication which has version and language as given",
                "operationId": "GetInContextVariableAssignments",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "InContextVariableAssignmentsParameters  with the parameters for the call including:\r\n            // Logical Id of the publication, Version of the publication, Language of the publication",
                        "required": true,
                        "schema": { "$ref": "#/definitions/InContextVariableAssignmentsParameters" }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/VariableResources" } }
                    }
                }
            }
        },
        "/Api/ContentObjects/{folderCardId}/ShowModeBehavior/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets the show mode behavior of the form when creating an object",
                "operationId": "GetShowModeBehaviorForNewObject",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The card identifier of the folder where to create the new content object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "referenceLanguageCardId",
                        "in": "query",
                        "description": "Card identifier of the language object that the method prefills the form.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "enum": ["show", "hide"], "type": "string" } } }
            }
        },
        "/Api/ContentObjects/{logicalId}/ShowModeBehavior/": {
            "get": {
                "tags": ["ContentObjects"],
                "summary": "Gets the show mode behavior of the form when creating a version object",
                "operationId": "GetShowModeBehaviorForNewVersion",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "enum": ["show", "hide"], "type": "string" } } }
            }
        },
        "/Api/ContentObjects/InContext/Baseline/BaselineEntry/": {
            "put": {
                "tags": ["ContentObjects"],
                "summary": "Updates the baseline with the given version of a document",
                "operationId": "SetVersionInBaseline",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "publicationId",
                        "in": "query",
                        "description": "The publication in which the baseline should be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publicationVersion",
                        "in": "query",
                        "description": "Version of publication",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "Logical Id of the document with the new version",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The new version number of the document which should be updated in the baseline",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "autoCompleteMode",
                        "in": "query",
                        "description": "Auto complete mode of baseline for children of the objects",
                        "required": false,
                        "type": "string",
                        "enum": ["iSHNone", "iSHFirstVersion", "iSHLatestReleased", "iSHLatestAvailable"]
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/CanReview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get the can review state for an object.",
                "description": "Both objects are dealt seperately, there is no validation if the document is actually part of the publication output.",
                "operationId": "CanReview",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language Card Id of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "publicationOutputCardId",
                        "in": "query",
                        "description": "Publication Output Card Id to validate the review end date for.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "boolean" } } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/CanCheckOut/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Checks whether the object can be checked out.",
                "operationId": "CanCheckOut",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language Card Id of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "boolean" } } }
            }
        },
        "/Api/DocumentObj/MetadataForPublish/": {
            "post": {
                "tags": ["DocumentObj"],
                "summary": "Gets the metadata fields that would also be created by the PublishService",
                "operationId": "MetadataForPublish",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "languageCardIds",
                        "in": "body",
                        "description": "Language Card Ids of the objects.",
                        "required": true,
                        "schema": { "type": "array", "items": { "format": "int64", "type": "integer" } }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/Metadata/": {
            "post": {
                "tags": ["DocumentObj"],
                "summary": "Gets the metadata for multiple language objects using the provided filter.",
                "operationId": "Metadata",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "filter",
                        "in": "body",
                        "description": "Object filter.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/DocumentObjectFilter" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/UndoCheckOut/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Undo check out",
                "operationId": "UndoCheckOut",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/CheckOut/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Check out document",
                "operationId": "CheckOut",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "string" } } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/CheckIn/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Check in document\r\n<para>Note: The actual content (blob) needs to be passed in the request body.</para>",
                "description": "The actual content (blob) needs to be passed in the request body.",
                "operationId": "CheckIn",
                "consumes": ["application/octet-stream"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "payload", "in": "body", "required": true, "type": "string", "format": "binary" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/Update/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Update the document\r\n<para>Note: The actual content (blob) needs to be passed in the request body.</para>",
                "description": "The actual content (blob) needs to be passed in the request body.",
                "operationId": "Update",
                "consumes": ["application/octet-stream"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "payload", "in": "body", "required": true, "type": "string", "format": "binary" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/ContentInfo/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get content information for document",
                "operationId": "ContentInfo",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id of object",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Item" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/ContentInfo/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get content information for document",
                "operationId": "ContentInfo",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "Logical id of object",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Resolution of object. Default is the system resolution.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Item" } } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/Content/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get XML content for a document",
                "operationId": "Content",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language Card Id of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "includeSchema",
                        "in": "query",
                        "description": "Set the schema information on the root element.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/Content/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get XML content for a document",
                "operationId": "Content",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "LogicalId of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Resolution of object. Default is the system resolution.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "includeSchema",
                        "in": "query",
                        "description": "Set the schema information on the root element.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/MetadataAndContent/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get metadata and xml content for a language card",
                "operationId": "MetadataAndContent",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "mode",
                        "in": "query",
                        "description": "Mode. If mode is Create (Xopus) the pipeline configuration is included.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "create"]
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/MetadataAndContent" } } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/Thumbnail/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Returns a thumbnail.\r\nSupported formats are jpg, jpeg, gif, bmp and png.",
                "description": "When the thumbnail cannot be rendered a dummy image is returned saying that the graphic could not be found.",
                "operationId": "Thumbnail",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "LanguageCardId of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "maxWidth",
                        "in": "query",
                        "description": "Maximum width.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "maxHeight",
                        "in": "query",
                        "description": "Maximum height.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/RevisionObject/{revisionId}/Thumbnail/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Returns a thumbnail.\r\nSupported formats are jpg, jpeg, gif, bmp and png.",
                "description": "When the thumbnail cannot be rendered a dummy image is returned saying that the graphic could not be found.",
                "operationId": "Thumbnail",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "revisionId",
                        "in": "path",
                        "description": "RevisionId of the requested object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "maxWidth",
                        "in": "query",
                        "description": "Maximum width.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "maxHeight",
                        "in": "query",
                        "description": "Maximum height.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/Thumbnail/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Returns a thumbnail.\r\nSupported formats are jpg, jpeg, gif, bmp and png.",
                "description": "When the thumbnail cannot be rendered a dummy image is returned saying that the graphic could not be found.",
                "operationId": "Thumbnail",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "LogicalId of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Resolution of object. Default is the system resolution.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maxWidth",
                        "in": "query",
                        "description": "Maximum width.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    },
                    {
                        "name": "maxHeight",
                        "in": "query",
                        "description": "Maximum height.",
                        "required": false,
                        "type": "integer",
                        "format": "int32"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/SelectionPreview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Preview an object with option to select target(s).",
                "operationId": "SelectionPreview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "LanguageCardId of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "selectMode",
                        "in": "query",
                        "description": "Select mode.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "link", "conref", "variable", "keyref", "reusableObject", "all"]
                    },
                    {
                        "name": "selectableElements",
                        "in": "query",
                        "description": "The elements that can be selected. Items are seperated by a '|'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/SelectionPreview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Preview an object with option to select target(s).",
                "operationId": "SelectionPreview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "LogicalId of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "selectMode",
                        "in": "query",
                        "description": "Select mode.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "link", "conref", "variable", "keyref", "reusableObject", "all"]
                    },
                    {
                        "name": "selectableElements",
                        "in": "query",
                        "description": "The elements that can be selected. Items are seperated by a '|'.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/Preview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Preview an object by languagecard id",
                "operationId": "Preview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "LanguageCardId of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "The object is embedded in a page or not.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/RevisionObject/{revisionId}/Preview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Preview an object by revision id",
                "operationId": "Preview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "revisionId",
                        "in": "path",
                        "description": "RevisionId of the requested object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "The object is embedded in a page or not.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/Preview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Preview an object by logical id",
                "operationId": "Preview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "LogicalId of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Resolution of object. Default is the system resolution.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "The object is embedded in a page or not.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LanguageCard/{languageCardId}/ComparePreview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Retrieves preview with changetracking",
                "operationId": "ComparePreview",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "languageCardIdToCompare",
                        "in": "query",
                        "description": "Language card id to compare",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "If true, only returns html which is inside the \"body\" of the preview output.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ComparePreview" } } }
            }
        },
        "/Api/DocumentObj/RevisionObject/{revisionId}/ComparePreview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Retrieves preview with changetracking",
                "operationId": "ComparePreview",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "revisionId", "in": "path", "description": "Revision id", "required": true, "type": "string" },
                    {
                        "name": "revisionIdToCompare",
                        "in": "query",
                        "description": "Revision id to compare",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "If true, only returns html which is inside the \"body\" of the preview output.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ComparePreview" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/ComparePreview/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Retrieves preview with changetracking",
                "operationId": "ComparePreview",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical Object id", "required": true, "type": "string" },
                    { "name": "version", "in": "query", "description": "Object version", "required": false, "type": "string" },
                    {
                        "name": "versionToCompare",
                        "in": "query",
                        "description": "Object version to compare",
                        "required": false,
                        "type": "string"
                    },
                    { "name": "language", "in": "query", "description": "Objet language", "required": false, "type": "string" },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Objet resolution",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "If true, only returns html which is inside the \"body\" of the preview output.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreObjectFragments",
                        "in": "query",
                        "description": "Whether to resolve conrefs",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreLinkTexts",
                        "in": "query",
                        "description": "Whether to resolve titles with xref and link elements",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "ignoreNavigationTitles",
                        "in": "query",
                        "description": "Whether to resolve titles with topicref elements",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ComparePreview" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new logical object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateLogicalObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateLogicalObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create a new logical object. The identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to update an existing logical object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLogicalObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateLogicalObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object to update. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/VersionObject/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new version object.",
                "description": "<para>The {fromVersion} is optional. By default, a new version number will be generated.</para>\r\n<para>The {doBranch} is optional. By default, a new version number will be generated.</para>\r\n<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateVersionObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateVersionObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new version object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/VersionObject/{logicalId}/{version}/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to update a version object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateVersionObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateVersionObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object containing the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/LanguageObject/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new language object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateLanguageObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new language object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the version object where to create the new language object. The version is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/LanguageObject/{languageCardId}/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to update a language object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLanguageObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object. The card identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/LanguageObject/{languageCardId}/Checkin/MetadataForm/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Gets a form containing definition and values needed to generate a form to check-in a language object.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLanguageObject\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCheckinLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object. The card identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/": {
            "post": {
                "tags": ["DocumentObj"],
                "summary": "Creates a new logical object in the specified folder.",
                "description": "<para>The parameter {metadata} can only contain logical level fields.</para>\r\n<para>The logical identifier can explicitly be added to the metadata.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateLogicalObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create the new logical object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the logical object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Updates a logical object with the specified metadata.",
                "description": "<para>The parameter {metadata} can only contain logical level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "UpdateLogicalObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical object id", "required": true, "type": "string" },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the logical object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["DocumentObj"],
                "summary": "Deletes a logical object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteLogicalObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical object ID", "required": true, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/VersionObject/": {
            "post": {
                "tags": ["DocumentObj"],
                "summary": "Creates a new version object in the specified logical object.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>The version can explicitly be added to the metadata. If the version is not provided by the metadatas the version will be generated by calculating the next free version number on the main branch for the specified logical object (e.g. 3.1.2 -&gt; 4).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/VersionObject/{logicalId}/{version}/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Updates the version object specified by {logicalId} and  {version} with the specified metadata.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "UpdateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object containing the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["DocumentObj"],
                "summary": "Deletes a version object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteVersionObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Lobical object ID", "required": true, "type": "string" },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Version object version",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/LanguageObject/": {
            "post": {
                "tags": ["DocumentObj"],
                "summary": "Creates a new language object in the version object specified by {logicalId} and {version}.",
                "description": "<para>The metadata can only contain language level fields.</para>\r\n<para>The language and resolution can explicitly be added to the metadata. If the language is not provided by the metadata the default language will be used (language on user card). If the resolution is not provided by the metadata the default resolution will be used (resolution on settings card).</para>\r\n<para>This method is only to be used in the old web client.</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "CreateLanguageObject",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new language object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the version object where to create the new language object.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/DocumentObj/LanguageObject/{languageCardId}/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Updates a language object with the specified metadata.",
                "description": "<para>The metadata that will be set on the language object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can only contain language level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "UpdateLanguageObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["DocumentObj"],
                "summary": "Deletes a language object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteLanguageObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/LanguageObject/{languageCardId}/Checkin/": {
            "put": {
                "tags": ["DocumentObj"],
                "summary": "Checks-in a language object with the specified metadata.",
                "description": "<para>The metadata that will be set on the language object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can only contain language level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "CheckinLanguageObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/DocumentObj/LogicalObject/{logicalId}/Versions/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get ordered list of versions by logicalId",
                "operationId": "GetVersions",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical object id", "required": true, "type": "string" },
                    {
                        "name": "sortDescending",
                        "in": "query",
                        "description": "Sort in descending order or not. Default is false (sort in ascending order).",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "array", "items": { "type": "string" } } } }
            }
        },
        "/Api/DocumentObj/{languageCardId}/Revisions/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get revisions log for the object with given language card id.",
                "operationId": "GetRevisions",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card id of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "sortDescending",
                        "in": "query",
                        "description": "Sort in descending order or not. Default is false (sort in ascending order).",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/RevisionInfo" } }
                    }
                }
            }
        },
        "/Api/DocumentObj/PossibleTargetStatuses/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get the initial target statuses for the given object type.",
                "operationId": "GetPossibleTargetStatuses",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "objectType",
                        "in": "query",
                        "description": "An object type (e.g. ISHModule).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "description": "Specifies the sort order of the statuses.. Default: None.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "ascending", "descending"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/DocumentObj/{languageCardId}/PossibleTargetStatuses/": {
            "get": {
                "tags": ["DocumentObj"],
                "summary": "Get the possible target statuses for the given language card ID.",
                "operationId": "GetPossibleTargetStatuses",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Language card ID of the object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "currentStatus",
                        "in": "query",
                        "description": "The element name of the current status (e.g. VSTATUSDRAFT).",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "description": "Specifies the sort order of the statuses. Default: None.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "ascending", "descending"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/ExternalPreview/": {
            "get": {
                "tags": ["ExternalPreview"],
                "summary": "Returns the HTML form to test the External Preview (read from ExternalPreviewForm.html in the InfoshareAuthor website root).",
                "operationId": "Get",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            },
            "post": {
                "tags": ["ExternalPreview"],
                "summary": "Get the html preview for the posted object.\r\n<para>The parameters:\r\nbase64Blob: Base64 encoded blob (XML); \r\npreTranslationType: Source (SRC) or Target (TGT, TARGET) language; \r\nhost: Identifier of the external system. This parameter is passed to the preview xsl. Defaults to 'ExternalPreview'.\r\n</para>",
                "operationId": "Post",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "externalPreview",
                        "in": "body",
                        "required": true,
                        "schema": { "$ref": "#/definitions/ExternalPreview" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ExternalPreview/Resource/": {
            "get": {
                "tags": ["ExternalPreview"],
                "summary": "Get an image resource from the repository.",
                "operationId": "Resource",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "LogicalId of the object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "[Optional =&gt; Default = Repository default] Language of the object.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/ExternalPreview/UserInfo/": {
            "get": {
                "tags": ["ExternalPreview"],
                "summary": "Test for the ExternalPreviewModule.",
                "operationId": "GetUserInfo",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/UserInfo" } } }
            }
        },
        "/Api/ExternalPreview/Validate/": {
            "get": {
                "tags": ["ExternalPreview"],
                "summary": "Returns the HTML form to test the External Validate (read from ExternalValidateForm.html in the InfoshareAuthor website root).",
                "operationId": "Validate",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            },
            "post": {
                "tags": ["ExternalPreview"],
                "summary": "Get the result of validate for the posted object.\r\n<para>The parameters:\r\nbase64Blob: Base64 encoded blob (XML); \r\npreTranslationType: Source (SRC) or Target (TGT, TARGET) language;         \r\n</para>",
                "operationId": "Validate",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "externalValidate",
                        "in": "body",
                        "required": true,
                        "schema": { "$ref": "#/definitions/ExternalPreview" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Folder/EditorTemplates/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Get the editor templates.",
                "operationId": "EditorTemplates",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "typesFilter",
                        "in": "query",
                        "description": "Filter editor templates for a type. \r\nPossible values: None (No filtering), Module, Library or Master.\r\nDefault value is None.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "module", "master", "library"]
                    },
                    {
                        "name": "languages",
                        "in": "query",
                        "description": "The languages for which you wish to retrieve the editor templates.\r\nWhen providing multiple values you should do \"&amp;languages=VLANGUAGEEN&amp;languages=VLANGUAGEFR\".\r\nDefault value is the working language of the current user.",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/EditorTemplateSpecification" } } }
            }
        },
        "/Api/Folder/EditorTemplates2/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Gets the released editor templates speciefied by {objectTypes} and {languages}.",
                "operationId": "EditorTemplates",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "objectTypes",
                        "in": "query",
                        "description": "The object types for which to return the editor templates.\r\nIf null or an empty list is provided, editor templates for all object types are returned.\r\n(e.g. \"&amp;objectTypes=ISHModule&amp;objectTypes=ISHPublicationOutput\")",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "languages",
                        "in": "query",
                        "description": "The languages for which you wish to retrieve the editor templates.\r\nDefault value is the working language of the current user.\r\n(e.g. \"&amp;languages=VLANGUAGEEN&amp;languages=VLANGUAGEFR\")",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/EditorTemplateSpecification" } } }
            }
        },
        "/Api/Folder/Favorites/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Get the first level items from the user's favorites folder.",
                "operationId": "GetFavorites",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Favorites" } } }
            }
        },
        "/Api/Folder/{folderCardId}/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Get the specified folder",
                "operationId": "Get",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The unique identifier of the folder",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/FolderModel" } } }
            },
            "put": {
                "tags": ["Folder"],
                "summary": "Update the specified folder",
                "operationId": "Put",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The unique identifier of the folder",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "folder",
                        "in": "body",
                        "description": "The folder model from http body",
                        "required": true,
                        "schema": { "$ref": "#/definitions/FolderModel" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["Folder"],
                "summary": "Delete the specified folder",
                "operationId": "Delete",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The unique identifier of the folder",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/Folder/": {
            "post": {
                "tags": ["Folder"],
                "summary": "Create the new query folder in the specified parent folder",
                "operationId": "Post",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folder",
                        "in": "body",
                        "description": "The folder model from http body",
                        "required": true,
                        "schema": { "$ref": "#/definitions/FolderModel" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Folder/{folderCardId}/Move/": {
            "put": {
                "tags": ["Folder"],
                "summary": "Moves folder under new parent folder",
                "operationId": "Move",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "Folder id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "parentFolderCardId",
                        "in": "body",
                        "description": "New folder parent id",
                        "required": true,
                        "schema": { "format": "int64", "type": "integer" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/Folder/{folderCardId}/Folders/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Gets the sub folders for a specified folderid.",
                "operationId": "Folders",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "Folder card id of the folder to get the items for.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Folders" } } }
            }
        },
        "/Api/Folder/Folders/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Gets the sub folders for the base (or root) folder.",
                "operationId": "Folders",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Folders" } } }
            }
        },
        "/Api/Folder/{folderCardId}/List/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Get the content for a folder",
                "operationId": "List",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "Folder Card Id",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "languages",
                        "in": "query",
                        "description": "The object languages which should be returned.\r\nWhen providing multiple values you should do \"&amp;languages=en&amp;languages=fr\".\r\nDefault value is the working language of the current user.",
                        "required": true,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "objectTypes",
                        "in": "query",
                        "description": "Object types to return.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "module", "master", "library", "illustration", "template", "publication"]
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/FolderContent" } } }
            }
        },
        "/Api/Folder/List/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Get the content for the base (or root) folder.",
                "operationId": "List",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/FolderContent" } } }
            }
        },
        "/Api/Folder/RootFolders/": {
            "get": {
                "tags": ["Folder"],
                "summary": "Gets the sub folders of specified BaseFolder type for the base (or root) folder.",
                "operationId": "RootFolders",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "baseFolderTypes",
                        "in": "query",
                        "description": "Types of folders",
                        "required": true,
                        "type": "array",
                        "items": { "type": "string", "enum": ["data", "system", "favorites", "editorTemplate"] },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/FolderModel" } }
                    }
                }
            }
        },
        "/Api/Lists/ListOfValues/{name}/": {
            "get": {
                "tags": ["Lists"],
                "summary": "Get the list of values by Name and Activity Filter.",
                "operationId": "GetListOfValues",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "E.g. Languages (DLANGUAGE), Resolutions (DRESOLUTION)",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Lists/Users/": {
            "post": {
                "tags": ["Lists"],
                "summary": "Get the list of users.",
                "operationId": "GetUserList",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "metadataFilter",
                        "in": "body",
                        "description": "MetadataFilter, which is retrieved from the Request Body as a JSON object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/MetadataFilter" }
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Lists/UserGroups/": {
            "post": {
                "tags": ["Lists"],
                "summary": "Get the list of user groups.",
                "operationId": "GetUserGroupList",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "metadataFilter",
                        "in": "body",
                        "description": "MetadataFilter, which is retrieved from the Request Body as a JSON object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/MetadataFilter" }
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Lists/UserRoles/": {
            "post": {
                "tags": ["Lists"],
                "summary": "Get the list of user roles.",
                "operationId": "GetUserRoleList",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "metadataFilter",
                        "in": "body",
                        "description": "MetadataFilter, which is retrieved from the Request Body as a JSON object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/MetadataFilter" }
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Lists/Baselines/": {
            "post": {
                "tags": ["Lists"],
                "summary": "Get the list of baselines.",
                "operationId": "GetBaselines",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "metadataFilter",
                        "in": "body",
                        "description": "MetadataFilter, which is retrieved from the Request Body as a JSON object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/MetadataFilter" }
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Lists/Edts/": {
            "post": {
                "tags": ["Lists"],
                "summary": "Get the list of electronic document types..",
                "operationId": "GetEdts",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "metadataFilter",
                        "in": "body",
                        "description": "MetadataFilter, which is retrieved from the Request Body as a JSON object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/MetadataFilter" }
                    },
                    {
                        "name": "activityFilter",
                        "in": "query",
                        "description": "Core.ActivityFilter (values = {None=0, Active=1, Inactive=2})",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "active", "inactive"]
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } }
                    }
                }
            }
        },
        "/Api/Localization/MetadataForm/": {
            "get": {
                "tags": ["Localization"],
                "summary": "Get resource file in RESJSON format",
                "operationId": "Get",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Requested language. If parameter null or empty the default language are returned.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "type": "array", "items": { "type": "string" } } }
                    }
                }
            }
        },
        "/Api/MetadataBinding/RetrieveTags/": {
            "post": {
                "tags": ["MetadataBinding"],
                "summary": "Retrieve tags",
                "operationId": "RetrieveTags",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "fieldName",
                        "in": "query",
                        "description": "The element name of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldLevel",
                        "in": "query",
                        "description": "The IshLevel of the field for which to retrieve information",
                        "required": true,
                        "type": "string",
                        "enum": ["none", "logical", "version", "language", "annotation"]
                    },
                    {
                        "name": "fieldsFilter",
                        "in": "body",
                        "description": "The values of other fields which can be used as an additional filter",
                        "required": true,
                        "schema": { "$ref": "#/definitions/FieldsFilter" }
                    },
                    {
                        "name": "inputFilter",
                        "in": "query",
                        "description": "String with the input of the user",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language in which to return the label/description. If no language is provide, the user language is used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maxTagsToReturn",
                        "in": "query",
                        "description": "The maximum number of tags that must be returned",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/RetrieveTagsResult" } } }
            }
        },
        "/Api/MetadataBinding/RetrieveTags2/": {
            "post": {
                "tags": ["MetadataBinding"],
                "summary": "Retrieve tags",
                "operationId": "RetrieveTags",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "fieldName",
                        "in": "query",
                        "description": "The element name of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldLevel",
                        "in": "query",
                        "description": "The IshLevel of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldValues",
                        "in": "body",
                        "description": "The values of other fields which can be used as an additional filter",
                        "required": true,
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/FieldValue" } }
                    },
                    {
                        "name": "inputFilter",
                        "in": "query",
                        "description": "String with the input of the user",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language in which to return the label/description. If no language is provide, the user language is used.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "maxTagsToReturn",
                        "in": "query",
                        "description": "The maximum number of tags that must be returned",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/RetrieveTagsResult" } } }
            }
        },
        "/Api/MetadataBinding/ResolveIds/": {
            "post": {
                "tags": ["MetadataBinding"],
                "summary": "Resolve ids",
                "operationId": "ResolveIds",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "fieldTags",
                        "in": "body",
                        "description": "The fields with the ids to resolve",
                        "required": true,
                        "schema": { "$ref": "#/definitions/FieldTags" }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language in which to return the label/description. If no language is provide, the user language is used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ResolveIdsResult" } } }
            }
        },
        "/Api/MetadataBinding/RetrieveTagStructure/": {
            "post": {
                "tags": ["MetadataBinding"],
                "summary": "Retrieve Tag Structure",
                "operationId": "RetrieveTagStructure",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "fieldName",
                        "in": "query",
                        "description": "The element name of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldLevel",
                        "in": "query",
                        "description": "The IshLevel of the field for which to retrieve information",
                        "required": true,
                        "type": "string",
                        "enum": ["none", "logical", "version", "language", "annotation"]
                    },
                    {
                        "name": "fieldsFilter",
                        "in": "body",
                        "description": "The values of other fields which can be used as an additional filter",
                        "required": true,
                        "schema": { "$ref": "#/definitions/FieldsFilter" }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language in which to return the label/description. If no language is provide, the user language is used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/RetrieveTagsStructureResult" } } }
            }
        },
        "/Api/MetadataBinding/RetrieveTagStructure2/": {
            "post": {
                "tags": ["MetadataBinding"],
                "summary": "Retrieve Tag Structure",
                "operationId": "RetrieveTagStructure",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "fieldName",
                        "in": "query",
                        "description": "The element name of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldLevel",
                        "in": "query",
                        "description": "The IshLevel of the field for which to retrieve information",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fieldValues",
                        "in": "body",
                        "description": "The values of other fields which can be used as an additional filter",
                        "required": true,
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/FieldValue" } }
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "The language in which to return the label/description. If no language is provide, the user language is used.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/RetrieveTagsStructureResult" } } }
            }
        },
        "/Api/Proxy/FontoReview/{relativeUri}/": {
            "post": {
                "tags": ["Proxy"],
                "summary": "Gets responce from the Review App through proxy.",
                "operationId": "FontoReview",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "relativeUri",
                        "in": "path",
                        "description": "The relative uri for subsequent requests to the Review App.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "data", "in": "body", "required": true, "schema": { "type": "object" } }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Publication/MetadataForm/": {
            "get": {
                "tags": ["Publication"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication.",
                "description": "<para>The {formId} is optional. By default, \"Properties_Create_\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create a new publication. The identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "referenceLogicalId",
                        "in": "query",
                        "description": "The identifier of the publication to update. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referenceVersion",
                        "in": "query",
                        "description": "The identifier of the publication version object to update.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "clientName", "in": "query", "required": false, "type": "string" },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/Publication/{folderCardId}/": {
            "post": {
                "tags": ["Publication"],
                "summary": "Creates a new object in the specified folder.",
                "description": "<para>The parameter {metadata} can only contain logical and version level fields.</para>\r\n<para>The logical identifier can explicitly be added to the metadata.</para>",
                "operationId": "CreateObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "path",
                        "description": "The card identifier of the folder where to create the new object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Publication/": {
            "put": {
                "tags": ["Publication"],
                "operationId": "UpdateObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "query", "required": true, "type": "string" },
                    { "name": "version", "in": "query", "required": true, "type": "string" },
                    { "name": "metadata", "in": "body", "required": true, "schema": { "$ref": "#/definitions/Metadata" } }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/Publication/VersionObject/MetadataForm/": {
            "get": {
                "tags": ["Publication"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication version.",
                "description": "<para>The {fromVersion} is optional. By default, a new version number will be generated.</para>\r\n<para>The {doBranch} is optional. By default, a new version number will be generated.</para>\r\n<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateVersionPublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateVersionForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the publication where to create the new version object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referenceLogicalId",
                        "in": "query",
                        "description": "The identifier of the publication to update. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "referenceVersion",
                        "in": "query",
                        "description": "The identifier of the publication version object to update.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    },
                    { "name": "clientName", "in": "query", "required": false, "type": "string" },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/Publication/VersionObject/": {
            "post": {
                "tags": ["Publication"],
                "summary": "Creates a new version object in the specified logical object.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>The version can explicitly be added to the metadata. If the version is not provided by the metadatas the version will be generated by calculating the next free version number on the main branch for the specified logical object (e.g. 3.1.2 -&gt; 4).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Publication/MetadataForm/LatestVersion/": {
            "get": {
                "tags": ["Publication"],
                "summary": "Gets the latest version of related logicalId.",
                "operationId": "GetLatestVersion",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "Version of the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "string" } } }
            }
        },
        "/Api/Publication/VersionObject/{publicationLogicalId}/{publicationVersion}/Preview/": {
            "get": {
                "tags": ["Publication"],
                "summary": "Preview an object by logical id",
                "operationId": "Preview",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "publicationLogicalId",
                        "in": "path",
                        "description": "LogicalId of the publication.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "publicationVersion",
                        "in": "path",
                        "description": "Version of the publication. Default is the latest available.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "LogicalId of the object.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "Version of object. Default is the latest available.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "language",
                        "in": "query",
                        "description": "Language of object. Default is the working language of the user.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "resolution",
                        "in": "query",
                        "description": "Resolution of object. Default is the system resolution.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "embed",
                        "in": "query",
                        "description": "The object is embedded in a page or not.",
                        "required": false,
                        "type": "boolean"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/Publication/VersionObject/{publicationLogicalId}/{publicationVersion}/SearchAnywhere/": {
            "get": {
                "tags": ["Publication"],
                "summary": "Simple search to search for a specific value in the repository.",
                "description": "This endpoint does not support searching for the publication object type.",
                "operationId": "SearchAnywhere",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    { "name": "publicationLogicalId", "in": "path", "required": true, "type": "string" },
                    { "name": "publicationVersion", "in": "path", "required": true, "type": "string" },
                    {
                        "name": "value",
                        "in": "query",
                        "description": "Simple text value to search for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "languages",
                        "in": "query",
                        "description": "Languages to return.\r\nWhen providing multiple values you should do \"&amp;languages=en&amp;languages=fr\".\r\nDefault value is the working language of the current user.",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "resolutions",
                        "in": "query",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "objectTypes",
                        "in": "query",
                        "description": "Object types to return.\r\nBy default all object types are returned.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "module", "master", "library", "illustration", "template", "publication"]
                    },
                    { "name": "baselineAutoCompleteMode", "in": "query", "required": false, "type": "string" },
                    {
                        "name": "maximumHits",
                        "in": "query",
                        "description": "Maximum hits to return.\r\nDefault value is 100.",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/SearchResults" } } }
            }
        },
        "/Api/Publication/Metadata/": {
            "post": {
                "tags": ["Publication"],
                "summary": "Gets the metadata for publication using the requested metadata filter.",
                "operationId": "GetMetadata",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "parameters",
                        "in": "body",
                        "description": "The parameters.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/PublicationMetadataParameters" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/PublicationMetadata" } } }
            }
        },
        "/Api/PublicationOutput/{publicationOutputCardId}/CanReview/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets the can review state for a publication output.",
                "operationId": "CanReview",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "publicationOutputCardId",
                        "in": "path",
                        "description": "Card ID of a publication output to validate the review end date for.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "boolean" } } }
            }
        },
        "/Api/PublicationOutput/{publicationOutputCardId}/Download/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Downloads a publication output.",
                "operationId": "Download",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "publicationOutputCardId",
                        "in": "path",
                        "description": "Card ID of a publication output",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/PublicationOutput/LogicalObject/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateLogicalPublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateLogicalObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create a new publication. The identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/LogicalObject/{logicalId}/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to update an existing publication.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLogicalPublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateLogicalObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the publication to update. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/VersionObject/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication version.",
                "description": "<para>The {fromVersion} is optional. By default, a new version number will be generated.</para>\r\n<para>The {doBranch} is optional. By default, a new version number will be generated.</para>\r\n<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateVersionPublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateVersionObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the publication where to create the new version object. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "fromVersion",
                        "in": "query",
                        "description": "The version from which a version or branch has to be created. A new (branched) version number will be generated and returned\r\n            as part of the metadata. If not provided a new version number will be generated and returned.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "doBranch",
                        "in": "query",
                        "description": "true if a branch has to be created; otherwise, false.",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/VersionObject/{logicalId}/{version}/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to update a publication version.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateVersionPublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateVersionObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the publication containing the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/LanguageObject/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication output.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateLanguagePublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new publication output. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the publication where to create the new publication output. The version is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "outputFormatId",
                        "in": "query",
                        "description": "The identifier of the output format that is used to create the new publication output.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/LanguageObject/{languageCardId}/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to update a publication output.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLanguagePublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateLanguageObjectForm",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the publication output. The card identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/LogicalObject/": {
            "post": {
                "tags": ["PublicationOutput"],
                "summary": "Creates a new logical object in the specified folder.",
                "description": "<para>The parameter {metadata} can only contain logical level fields.</para>\r\n<para>The logical identifier can explicitly be added to the metadata.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateLogicalObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "folderCardId",
                        "in": "query",
                        "description": "The card identifier of the folder where to create the new logical object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the logical object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/PublicationOutput/LogicalObject/{logicalId}/": {
            "put": {
                "tags": ["PublicationOutput"],
                "summary": "Updates a logical object with the specified metadata.",
                "description": "<para>The parameter {metadata} can only contain logical level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "UpdateLogicalObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical object id", "required": true, "type": "string" },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the logical object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["PublicationOutput"],
                "summary": "Deletes a logical object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteLogicalObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Logical object id", "required": true, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/PublicationOutput/VersionObject/": {
            "post": {
                "tags": ["PublicationOutput"],
                "summary": "Creates a new version object in the specified logical object.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>The version can explicitly be added to the metadata. If the version is not provided by the metadatas the version will be generated by calculating the next free version number on the main branch for the specified logical object (e.g. 3.1.2 -&gt; 4).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/PublicationOutput/VersionObject/{logicalId}/{version}/": {
            "put": {
                "tags": ["PublicationOutput"],
                "summary": "Updates the version object specified by {logicalId} and  {version} with the specified metadata.",
                "description": "<para>The parameter {metadata} can only contain version level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "UpdateVersionObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "The identifier of the logical object containing the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "The version of the version object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["PublicationOutput"],
                "summary": "Deletes a version object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteVersionObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "logicalId", "in": "path", "description": "Lobical object ID", "required": true, "type": "string" },
                    {
                        "name": "version",
                        "in": "path",
                        "description": "Version object version",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/PublicationOutput/LanguageObject/": {
            "post": {
                "tags": ["PublicationOutput"],
                "summary": "Creates a new language object in the version object specified by {logicalId} and {version}.",
                "description": "<para>The metadata can only contain language level fields.</para>\r\n<para>The language and resolution can explicitly be added to the metadata. If the language is not provided by the metadata the default language will be used (language on user card). If the resolution is not provided by the metadata the default resolution will be used (resolution on settings card).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateLanguageObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new language object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the version object where to create the new language object.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/PublicationOutput/LanguageObject/{languageCardId}/": {
            "put": {
                "tags": ["PublicationOutput"],
                "summary": "Updates a language object with the specified metadata.",
                "description": "<para>The metadata that will be set on the language object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can only contain language level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "UpdateLanguageObject",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "metadata", "in": "body", "required": true, "schema": { "$ref": "#/definitions/Metadata" } }
                ],
                "responses": { "204": { "description": "No Content" } }
            },
            "delete": {
                "tags": ["PublicationOutput"],
                "summary": "Deletes a language object.",
                "description": "<para>Requirements are: \r\n            The user must have write access for the folder in which the object is going to be deleted. \r\n            The documentation (DocumentObj 2.5 - Delete describes the behavior depending on your starting situation. [SRQ-3834] </para>",
                "operationId": "DeleteLanguageObject",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/PublicationOutput/LogicalObject/{logicalId}/Versions/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets the list of versions for the publication specified by logical ID.",
                "operationId": "GetVersions",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "path",
                        "description": "Logical object ID.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "sortOrder",
                        "in": "query",
                        "description": "Specifies the sort order of the versions. Default: Descending.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "ascending", "descending"]
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "array", "items": { "type": "string" } } } }
            }
        },
        "/Api/PublicationOutput/Output/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to create a new publication output.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.CreateLanguagePublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetCreateOutput",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new publication output. The identifier is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the publication where to create the new publication output. The version is required.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "outputFormatId",
                        "in": "query",
                        "description": "The identifier of the output format that is used to create the new publication output.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/Output/": {
            "post": {
                "tags": ["PublicationOutput"],
                "summary": "Creates a new output in the version object specified by {logicalId} and {version}.",
                "description": "<para>The metadata can only contain language level fields.</para>\r\n<para>The language and resolution can explicitly be added to the metadata. If the language is not provided by the metadata the default language will be used (language on user card). If the resolution is not provided by the metadata the default resolution will be used (resolution on settings card).</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "CreateOutput",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "logicalId",
                        "in": "query",
                        "description": "The identifier of the logical object where to create the new output.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "version",
                        "in": "query",
                        "description": "The version of the version object where to create the new output.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "metadata",
                        "in": "body",
                        "description": "The metadata that will be set on the version object.",
                        "required": true,
                        "schema": { "$ref": "#/definitions/Metadata" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/PublicationOutput/Output/{languageCardId}/MetadataForm/": {
            "get": {
                "tags": ["PublicationOutput"],
                "summary": "Gets a form containing definition and values needed to generate a form to update a publication output.",
                "description": "<para>The {formId} is optional. By default, \"Trisoft.InfoShareAuthor.UpdateLanguagePublication\" is used.</para>\r\n<para>This method is only to be used in the old web client.</para>",
                "operationId": "GetUpdateOutput",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the publication output. The card identifier is required.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "clientName",
                        "in": "query",
                        "description": "The list of values for client name in the metadataconfig conditions.",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "formId",
                        "in": "query",
                        "description": "The identifier of the form definition in the metadata configuration.",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/Form" } } }
            }
        },
        "/Api/PublicationOutput/Output/{languageCardId}/": {
            "put": {
                "tags": ["PublicationOutput"],
                "summary": "Updates a language object with the specified metadata.",
                "description": "<para>The metadata that will be set on the language object, can be passed in the request body in JSON format.</para>\r\n<para>The metadata can only contain language level fields.</para>\r\n<para>This method is only to be used in the old web client.</para>\r\n<para>When content has to be uploaded, it can be passed in the request body in multipart format. The multipart body can contain 2 parts. A part named \"metadata\" containing the metadata in JSON format, and a part named \"data\" containing the content.</para>",
                "operationId": "UpdateOutput",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "languageCardId",
                        "in": "path",
                        "description": "Card identifier of the language object.",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    { "name": "metadata", "in": "body", "required": true, "schema": { "$ref": "#/definitions/Metadata" } }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/Search/Anywhere/": {
            "get": {
                "tags": ["Search"],
                "summary": "Simple search to search for a specific value in the repository.",
                "description": "This endpoint does not support searching for the publication object type.",
                "operationId": "Anywhere",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "value",
                        "in": "query",
                        "description": "Simple text value to search for.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "languages",
                        "in": "query",
                        "description": "Languages to return.\r\nWhen providing multiple values you should do \"&amp;languages=en&amp;languages=fr\".\r\nDefault value is the working language of the current user.",
                        "required": false,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    },
                    {
                        "name": "objectTypes",
                        "in": "query",
                        "description": "Object types to return.\r\nBy default all object types are returned.",
                        "required": false,
                        "type": "string",
                        "enum": ["none", "module", "master", "library", "illustration", "template", "publication"]
                    },
                    {
                        "name": "maximumHits",
                        "in": "query",
                        "description": "Maximum hits to return.\r\nDefault value is 100.",
                        "required": false,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/SearchResults" } } }
            }
        },
        "/Api/Settings/ApplicationHost/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get integration settings for the ApplicationHost.",
                "operationId": "ApplicationHost",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ApplicationHostSettings" } } }
            }
        },
        "/Api/Settings/Enrich/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get integration settings for Enrich.",
                "operationId": "Enrich",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/EnrichSettings" } } }
            }
        },
        "/Api/Settings/Integration/Reach/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get integration settings for SDL LiveContent Reach.",
                "operationId": "GetReachConfig",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/ReachConfig" } } }
            }
        },
        "/Api/Settings/Integration/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get integration settings for SDL LiveContent Create.",
                "operationId": "GetCreateConfig",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/XopusConfig" } } }
            }
        },
        "/Api/Settings/Integration/Create/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Get integration settings for SDL LiveContent Create.",
                "operationId": "GetCreateConfig",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/XopusConfig" } } }
            }
        },
        "/Api/Settings/Metadata/": {
            "post": {
                "tags": ["Settings"],
                "summary": "Gets the Settings metadata",
                "operationId": "GetMetadata",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "settingsMetadataParameters",
                        "in": "body",
                        "description": "SettingsMetadataParameters with the parameters for the call including:\r\n            Requested metadata",
                        "required": true,
                        "schema": { "$ref": "#/definitions/SettingsMetadataParameters" }
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/SettingsMetadata" } } }
            }
        },
        "/Api/Settings/CollectiveSpaces/": {
            "get": {
                "tags": ["Settings"],
                "summary": "Gets the collective space configuration from settings and metadataconfig file.",
                "operationId": "GetCollectiveSpaceConfig",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/CollectiveSpacesConfig" } } }
            }
        },
        "/Api/Synchronization/SyncInfo/": {
            "get": {
                "tags": ["Synchronization"],
                "summary": "Gets the synchronization information required for the client application specified by {clientExe}, {clientExeVersion} and {clientEdition}, and/or for the Authoring Bridge specified by {authoringBridgeVersion}.",
                "operationId": "GetSyncInfo",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "clientExe",
                        "in": "query",
                        "description": "File name of the client application (e.g. 'xmetal.exe')",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientExeVersion",
                        "in": "query",
                        "description": "Version of the client application (e.g. 10.0)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "clientEdition",
                        "in": "query",
                        "description": "Edition of the client application (e.g. 'J' - Japanese)",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "authoringBridgeVersion",
                        "in": "query",
                        "description": "Version of the Authoring Bridge (e.g. 12.0)",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/TrustedSubsystem/Fonto/document/revision/": {
            "get": {
                "tags": ["TrustedSubsystem"],
                "summary": "Gets the XML content of a specific document revision.",
                "operationId": "GetFontoDocumentRevision",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "query",
                        "description": "The identifier of the document for which to retrieve the revision.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "revisionId",
                        "in": "query",
                        "description": "The identifier of the revision to retrieve.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "request.data.publicationId", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.language", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.version", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.resolution", "in": "query", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "type": "object" } } }
            }
        },
        "/Api/TrustedSubsystem/Fonto/document/history/": {
            "get": {
                "tags": ["TrustedSubsystem"],
                "summary": "Gets the complete revision history for the given document id in a chronological descending (new to old) order.",
                "operationId": "GetFontoDocumentHistory",
                "consumes": [],
                "produces": ["application/json", "text/json"],
                "parameters": [
                    {
                        "name": "documentId",
                        "in": "query",
                        "description": "The identifier of the document for which to retrieve the revisions.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "request.data.publicationId", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.language", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.version", "in": "query", "required": false, "type": "string" },
                    { "name": "request.data.resolution", "in": "query", "required": false, "type": "string" }
                ],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/DocumentHistoryInfo" } } }
            }
        },
        "/Api/User/UserInfo/": {
            "get": {
                "tags": ["User"],
                "summary": "Get info for the current logged on user",
                "operationId": "GetUserInfo",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "$ref": "#/definitions/UserInfo" } } }
            }
        },
        "/Api/User/ChangePassword/": {
            "put": {
                "tags": ["User"],
                "summary": "Change password",
                "operationId": "ChangePassword",
                "consumes": [],
                "produces": [],
                "parameters": [
                    {
                        "name": "userName",
                        "in": "query",
                        "description": "User name of the user to change the password for.",
                        "required": true,
                        "type": "string"
                    },
                    { "name": "oldPassword", "in": "query", "description": "Old password.", "required": true, "type": "string" },
                    { "name": "newPassword", "in": "query", "description": "New password.", "required": true, "type": "string" },
                    {
                        "name": "confirmationPassword",
                        "in": "query",
                        "description": "Confirmation of new password.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/User/Preferences/": {
            "get": {
                "tags": ["User"],
                "summary": "Gets user preference sets",
                "operationId": "GetPreferenceSets",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "parameters": [
                    {
                        "name": "preferenceSetNames",
                        "in": "query",
                        "description": "The set name filter used for filtering preference sets.",
                        "required": true,
                        "type": "array",
                        "items": { "type": "string" },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/UserPreferenceSet" } }
                    }
                }
            },
            "put": {
                "tags": ["User"],
                "summary": "Sets user preference sets",
                "operationId": "SetPreferenceSets",
                "consumes": ["application/x-www-form-urlencoded", "application/json", "text/json", "application/xml", "text/xml"],
                "produces": [],
                "parameters": [
                    {
                        "name": "preferenceSets",
                        "in": "body",
                        "required": true,
                        "schema": { "type": "array", "items": { "$ref": "#/definitions/UserPreferenceSet" } }
                    }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        },
        "/Api/User/Preferences/UILanguage/": {
            "get": {
                "tags": ["User"],
                "summary": "Gets user UILanguage preference for WebClient",
                "operationId": "GetUiLanguagePreference",
                "consumes": [],
                "produces": ["application/json", "text/json", "application/xml", "text/xml"],
                "responses": { "200": { "description": "OK", "schema": { "type": "string" } } }
            },
            "put": {
                "tags": ["User"],
                "summary": "Sets user UILanguage preference for WebClient",
                "operationId": "SetUiLanguagePreference",
                "consumes": [],
                "produces": [],
                "parameters": [
                    { "name": "languageCode", "in": "query", "description": "Language code", "required": true, "type": "string" }
                ],
                "responses": { "204": { "description": "No Content" } }
            }
        }
    },
    "definitions": {
        "AnnotationParameters": {
            "type": "object",
            "properties": {
                "publicationId": { "type": "string" },
                "publicationVersion": { "type": "string" },
                "revisionId": { "type": "string" }
            }
        },
        "Form": {
            "type": "object",
            "properties": {
                "definition": { "$ref": "#/definitions/FormDefinition" },
                "metadata": { "$ref": "#/definitions/Metadata" },
                "objectDescriptor": { "$ref": "#/definitions/ObjectDescriptor" }
            }
        },
        "FormDefinition": {
            "type": "object",
            "properties": {
                "label": { "$ref": "#/definitions/TranslatableValue" },
                "description": { "$ref": "#/definitions/TranslatableValue" },
                "items": { "type": "array", "items": { "$ref": "#/definitions/FormChild" } },
                "id": { "type": "string" },
                "width": { "type": "string" },
                "height": { "type": "string" }
            }
        },
        "Metadata": {
            "type": "object",
            "properties": { "fieldValues": { "type": "array", "items": { "$ref": "#/definitions/FieldValue" } } }
        },
        "ObjectDescriptor": { "type": "object", "properties": { "objectType": { "type": "string" } } },
        "TranslatableValue": {
            "type": "object",
            "properties": { "default": { "type": "string" }, "resourceId": { "type": "string" } }
        },
        "FormChild": {
            "required": ["discriminator"],
            "type": "object",
            "properties": {
                "typeName": { "type": "string", "readOnly": true },
                "label": { "$ref": "#/definitions/TranslatableValue" },
                "description": { "$ref": "#/definitions/TranslatableValue" },
                "discriminator": { "type": "string" }
            },
            "discriminator": "discriminator"
        },
        "FieldValue": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "level": { "type": "string" },
                "value": { "type": "object" },
                "originalValue": { "type": "object" },
                "valueType": { "enum": ["undefined", "string", "number", "dateTime", "reference"], "type": "string" },
                "multiValue": { "type": "boolean" },
                "originalValueProvided": { "type": "boolean" }
            }
        },
        "AnnotationRequest": {
            "type": "object",
            "properties": {
                "metadata": { "$ref": "#/definitions/Metadata" },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" }
            }
        },
        "RequestedMetadata": {
            "type": "object",
            "properties": { "fields": { "type": "array", "items": { "$ref": "#/definitions/MetadataField" } } }
        },
        "MetadataField": {
            "type": "object",
            "properties": { "name": { "type": "string" }, "level": { "type": "string" }, "valueType": { "type": "string" } }
        },
        "AnnotationMultipleUpdateRequestParameter": {
            "type": "object",
            "properties": {
                "updateRequests": { "type": "array", "items": { "$ref": "#/definitions/AnnotationUpdateRequest" } },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" }
            }
        },
        "AnnotationUpdateRequest": {
            "type": "object",
            "properties": { "annotationId": { "type": "string" }, "metadata": { "$ref": "#/definitions/Metadata" } }
        },
        "AnnotationUpdateResponse": {
            "type": "object",
            "properties": {
                "errorNumber": { "format": "int32", "type": "integer" },
                "errorMessage": { "type": "string" },
                "metadata": { "$ref": "#/definitions/ResolvedMetadata" },
                "annotationReplyMetadata": { "type": "array", "items": { "$ref": "#/definitions/AnnotationReplyMetadata" } },
                "annotationId": { "type": "string" },
                "objectType": { "type": "string" }
            }
        },
        "ResolvedMetadata": {
            "type": "object",
            "properties": { "fields": { "type": "array", "items": { "$ref": "#/definitions/ResolvedFieldValue" } } }
        },
        "AnnotationReplyMetadata": {
            "type": "object",
            "properties": {
                "metadata": { "$ref": "#/definitions/ResolvedMetadata" },
                "annotationId": { "type": "string" },
                "annotationReplyId": { "format": "int64", "type": "integer" }
            }
        },
        "ResolvedFieldValue": {
            "type": "object",
            "properties": {
                "name": { "type": "string", "readOnly": true },
                "level": {
                    "enum": ["none", "logical", "version", "lng", "annotation", "reply"],
                    "type": "string",
                    "readOnly": true
                },
                "value": { "type": "object", "readOnly": true },
                "valueType": { "enum": ["none", "id", "value", "element"], "type": "string", "readOnly": true },
                "multiValue": { "type": "boolean", "readOnly": true },
                "dataType": { "type": "string", "readOnly": true }
            }
        },
        "AnnotationMetadata": {
            "type": "object",
            "properties": {
                "metadata": { "$ref": "#/definitions/ResolvedMetadata" },
                "annotationReplyMetadata": { "type": "array", "items": { "$ref": "#/definitions/AnnotationReplyMetadata" } },
                "annotationId": { "type": "string" },
                "objectType": { "type": "string" }
            }
        },
        "AnnotationDetailParameters": {
            "type": "object",
            "properties": {
                "annotationIds": { "type": "array", "items": { "type": "string" } },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" }
            }
        },
        "AnnotationListParameters": {
            "type": "object",
            "properties": {
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" },
                "metadataFilter": { "$ref": "#/definitions/MetadataFilter" }
            }
        },
        "MetadataFilter": {
            "type": "object",
            "properties": { "fields": { "type": "array", "items": { "$ref": "#/definitions/MetadataFilterField" } } }
        },
        "MetadataFilterField": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "level": { "type": "string" },
                "operator": { "type": "string" },
                "valueType": { "type": "string" },
                "value": { "type": "string" }
            }
        },
        "User": {
            "type": "object",
            "properties": { "id": { "type": "string" }, "username": { "type": "string" }, "email": { "type": "string" } }
        },
        "Publication": {
            "type": "object",
            "properties": {
                "id": { "format": "int32", "type": "integer" },
                "title": { "type": "string" },
                "url": { "type": "string" }
            }
        },
        "Status": {
            "type": "object",
            "properties": { "id": { "format": "int32", "type": "integer" }, "title": { "type": "string" } }
        },
        "CommentingResult": {
            "type": "object",
            "properties": {
                "comments": { "type": "array", "items": { "$ref": "#/definitions/Comment" } },
                "total": { "format": "int32", "type": "integer" }
            }
        },
        "Comment": {
            "type": "object",
            "properties": {
                "id": { "format": "int64", "type": "integer" },
                "content": { "type": "string" },
                "itemUri": { "type": "string" },
                "pageId": { "format": "int32", "type": "integer" },
                "pageTitle": { "type": "string" },
                "pageUrl": { "type": "string" },
                "publicationId": { "format": "int32", "type": "integer" },
                "publicationTitle": { "type": "string" },
                "publicationUrl": { "type": "string" },
                "creationDate": { "format": "date-time", "type": "string" },
                "modifiedDate": { "format": "date-time", "type": "string" },
                "parentId": { "format": "int64", "type": "integer" },
                "status": { "enum": ["new", "approved", "declined", "completed"], "type": "string" },
                "user": { "$ref": "#/definitions/User" },
                "replyCount": { "format": "int32", "type": "integer" },
                "language": { "type": "string" },
                "replies": { "type": "array", "items": { "$ref": "#/definitions/Comment" } }
            }
        },
        "DocumentObjDescriptor": {
            "type": "object",
            "properties": {
                "logicalId": { "type": "string" },
                "version": { "type": "string" },
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "logicalCardId": { "format": "int64", "type": "integer" },
                "versionCardId": { "format": "int64", "type": "integer" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "objectType": { "type": "string" }
            }
        },
        "InContextMetadataParameters": {
            "type": "object",
            "properties": {
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "publicationId": { "type": "string" },
                "publicationVersion": { "type": "string" },
                "logicalIds": { "type": "array", "items": { "type": "string" } },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" },
                "keepOrder": { "type": "boolean" }
            }
        },
        "ContentObjectMetadata": {
            "type": "object",
            "properties": {
                "resultType": {
                    "enum": ["notInitialized", "objectInvalidId", "objectNotFound", "objectFound"],
                    "type": "string"
                },
                "metadata": { "$ref": "#/definitions/ResolvedMetadata" },
                "logicalId": { "type": "string" },
                "version": { "type": "string" },
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "logicalCardId": { "format": "int64", "type": "integer" },
                "versionCardId": { "format": "int64", "type": "integer" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "objectType": { "type": "string" }
            }
        },
        "InContextContentParameters": {
            "type": "object",
            "properties": {
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "publicationId": { "type": "string" },
                "publicationVersion": { "type": "string" },
                "revisionId": { "type": "string" },
                "ignoreNavigationTitles": { "type": "boolean" },
                "includeByteOrderMark": { "type": "boolean" }
            }
        },
        "InContextVariableAssignmentsParameters": {
            "type": "object",
            "properties": {
                "publicationId": { "type": "string" },
                "publicationVersion": { "type": "string" },
                "language": { "type": "string" }
            }
        },
        "VariableResources": {
            "type": "object",
            "properties": {
                "revisionId": { "type": "string" },
                "variableAssignments": { "$ref": "#/definitions/VariableAssignments" },
                "logicalId": { "type": "string" },
                "version": { "type": "string" },
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "logicalCardId": { "format": "int64", "type": "integer" },
                "versionCardId": { "format": "int64", "type": "integer" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "objectType": { "type": "string" }
            }
        },
        "VariableAssignments": {
            "type": "object",
            "properties": { "variables": { "type": "array", "items": { "$ref": "#/definitions/VariableAssignment" } } }
        },
        "VariableAssignment": { "type": "object", "properties": { "id": { "type": "string" }, "content": { "type": "string" } } },
        "DocumentObjectFilter": {
            "type": "object",
            "properties": {
                "languageCardIds": { "type": "array", "items": { "format": "int64", "type": "integer" } },
                "statusFilter": {
                    "enum": ["latestReleasedVersions", "draftOrLatestReleasedVersions", "allReleasedVersions", "noStatusFilter"],
                    "type": "string"
                },
                "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" }
            }
        },
        "Item": {
            "type": "object",
            "properties": {
                "checkedOutBy": { "type": "string" },
                "language": { "type": "string" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "logicalId": { "type": "string" },
                "resolution": { "type": "string" },
                "status": { "type": "string" },
                "version": { "type": "string" },
                "title": { "type": "string" },
                "revision": { "format": "int64", "type": "integer" },
                "revisionId": { "type": "string" },
                "electronicDocumentType": { "$ref": "#/definitions/ElectronicDocumentType" }
            }
        },
        "ElectronicDocumentType": {
            "type": "object",
            "properties": {
                "defaultExtension": { "type": "string" },
                "mimeType": { "type": "string" },
                "name": { "type": "string" }
            }
        },
        "MetadataAndContent": {
            "type": "object",
            "properties": { "item": { "$ref": "#/definitions/MetadataAndContentItem" }, "content": { "type": "string" } }
        },
        "MetadataAndContentItem": {
            "type": "object",
            "properties": {
                "canCheckIn": { "type": "boolean" },
                "canCheckOut": { "type": "boolean" },
                "canUndoCheckOut": { "type": "boolean" },
                "css": { "type": "string" },
                "docType": { "type": "string" },
                "publicId": { "type": "string" },
                "xsd": { "type": "string" },
                "title": { "type": "string" },
                "revision": { "format": "int64", "type": "integer" },
                "pipeline": { "$ref": "#/definitions/Pipeline" },
                "checkedOutBy": { "type": "string" },
                "language": { "type": "string" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "logicalId": { "type": "string" },
                "resolution": { "type": "string" },
                "status": { "type": "string" },
                "version": { "type": "string" },
                "revisionId": { "type": "string" },
                "electronicDocumentType": { "$ref": "#/definitions/ElectronicDocumentType" }
            }
        },
        "Pipeline": {
            "type": "object",
            "properties": {
                "version": { "type": "string" },
                "xml": { "type": "string" },
                "xsd": { "type": "string" },
                "views": { "type": "array", "items": { "$ref": "#/definitions/XopusConfigView" } }
            }
        },
        "XopusConfigView": {
            "type": "object",
            "properties": {
                "actions": { "type": "array", "items": { "$ref": "#/definitions/XopusConfigAction" } },
                "name": { "type": "string" }
            }
        },
        "XopusConfigAction": { "type": "object", "properties": { "type": { "type": "string", "readOnly": true } } },
        "ComparePreview": {
            "type": "object",
            "properties": { "hasDifferences": { "type": "boolean" }, "content": { "type": "string" } }
        },
        "RevisionInfo": {
            "type": "object",
            "properties": { "revisionId": { "type": "string" }, "revision": { "format": "int64", "type": "integer" } }
        },
        "ValueListItem": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "text": { "$ref": "#/definitions/TranslatableValue" },
                "description": { "$ref": "#/definitions/TranslatableValue" }
            }
        },
        "ExternalPreview": {
            "type": "object",
            "properties": {
                "base64Blob": { "type": "string" },
                "preTranslationType": { "type": "string" },
                "host": { "type": "string" },
                "ignoreObjectFragments": { "type": "boolean" },
                "ignoreLinkTexts": { "type": "boolean" },
                "ignoreNavigationTitles": { "type": "boolean" }
            }
        },
        "UserInfo": {
            "type": "object",
            "properties": {
                "userName": { "type": "string" },
                "displayName": { "type": "string" },
                "canChangePassword": { "type": "boolean" },
                "isAdmin": { "type": "boolean" }
            }
        },
        "EditorTemplateSpecification": {
            "type": "object",
            "properties": {
                "editorTemplateGroups": { "type": "array", "items": { "$ref": "#/definitions/EditorTemplateGroup" } },
                "editorTemplates": { "type": "array", "items": { "$ref": "#/definitions/EditorTemplate" } }
            }
        },
        "EditorTemplateGroup": {
            "type": "object",
            "properties": {
                "id": { "format": "int64", "type": "integer" },
                "name": { "type": "string" },
                "objectType": { "type": "string" }
            }
        },
        "EditorTemplate": {
            "type": "object",
            "properties": {
                "logicalId": { "type": "string" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "editorTemplateGroupId": { "format": "int64", "type": "integer" },
                "language": { "type": "string" },
                "title": { "type": "string" },
                "icon": { "type": "string" },
                "description": { "type": "string" },
                "version": { "type": "string" }
            }
        },
        "Favorites": {
            "type": "object",
            "properties": { "items": { "type": "array", "items": { "$ref": "#/definitions/Favorite" } } }
        },
        "Favorite": {
            "type": "object",
            "properties": {
                "logicalId": { "type": "string" },
                "logicalCardId": { "format": "int64", "type": "integer" },
                "title": { "type": "string" },
                "type": {
                    "enum": [
                        "none",
                        "module",
                        "master",
                        "library",
                        "template",
                        "illustration",
                        "publication",
                        "referenceFolder",
                        "queryFolder",
                        "folder"
                    ],
                    "type": "string"
                },
                "folderPath": { "$ref": "#/definitions/FolderPath" }
            }
        },
        "FolderPath": {
            "type": "object",
            "properties": { "folderPathSegments": { "type": "array", "items": { "$ref": "#/definitions/FolderPathSegment" } } }
        },
        "FolderPathSegment": {
            "type": "object",
            "properties": {
                "folderCardId": { "format": "int64", "type": "integer" },
                "depth": { "format": "int64", "type": "integer" },
                "label": { "type": "string" }
            }
        },
        "FolderModel": {
            "type": "object",
            "properties": {
                "folderCardId": { "format": "int64", "type": "integer" },
                "parentFolderCardId": { "format": "int64", "type": "integer" },
                "isBaseFolder": { "type": "boolean" },
                "name": { "type": "string" },
                "ownedBy": { "type": "string" },
                "readAccess": { "type": "array", "items": { "type": "string" } },
                "xmlQuery": { "type": "string" },
                "folderType": {
                    "enum": [
                        "none",
                        "module",
                        "master",
                        "library",
                        "template",
                        "illustration",
                        "publication",
                        "reference",
                        "query"
                    ],
                    "type": "string"
                }
            }
        },
        "Folders": {
            "type": "object",
            "properties": { "items": { "type": "array", "items": { "$ref": "#/definitions/NavigationFolder" } } }
        },
        "NavigationFolder": {
            "type": "object",
            "properties": {
                "folderType": {
                    "enum": [
                        "none",
                        "module",
                        "master",
                        "library",
                        "template",
                        "illustration",
                        "publication",
                        "reference",
                        "query"
                    ],
                    "type": "string"
                },
                "cardId": { "format": "int64", "type": "integer" },
                "isBaseFolder": { "type": "boolean" },
                "parentId": { "format": "int64", "type": "integer" },
                "title": { "type": "string" }
            }
        },
        "FolderContent": {
            "type": "object",
            "properties": { "items": { "type": "array", "items": { "$ref": "#/definitions/FolderContentItem" } } }
        },
        "FolderContentItem": {
            "type": "object",
            "properties": {
                "type": { "type": "string" },
                "logicalId": { "type": "string" },
                "canCheckIn": { "type": "boolean" },
                "canCheckOut": { "type": "boolean" },
                "canUndoCheckOut": { "type": "boolean" },
                "exception": { "type": "string" },
                "itemType": {
                    "enum": [
                        "none",
                        "module",
                        "master",
                        "library",
                        "template",
                        "illustration",
                        "publication",
                        "referenceFolder",
                        "queryFolder",
                        "folder"
                    ],
                    "type": "string"
                },
                "version": { "type": "string" },
                "language": { "type": "string" },
                "resolution": { "type": "string" },
                "cardId": { "format": "int64", "type": "integer" },
                "isBaseFolder": { "type": "boolean" },
                "parentId": { "format": "int64", "type": "integer" },
                "title": { "type": "string" }
            }
        },
        "FieldsFilter": {
            "type": "object",
            "properties": { "fields": { "type": "array", "items": { "$ref": "#/definitions/Field" } } }
        },
        "Field": {
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "level": { "enum": ["none", "logical", "version", "language", "annotation"], "type": "string" },
                "valueType": { "enum": ["none", "id", "value", "element"], "type": "string" },
                "value": { "type": "string" }
            }
        },
        "RetrieveTagsResult": {
            "type": "object",
            "properties": {
                "tags": { "type": "array", "items": { "$ref": "#/definitions/Tag" } },
                "messages": { "type": "array", "items": { "$ref": "#/definitions/Message" } }
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": { "type": "string" },
                "label": { "type": "string" },
                "annotatedLabel": { "type": "string" },
                "description": { "type": "string" }
            }
        },
        "Message": {
            "type": "object",
            "properties": {
                "baseDescription": { "type": "string" },
                "description": { "type": "string" },
                "resourceId": { "type": "string" },
                "parameters": { "type": "array", "items": { "$ref": "#/definitions/Parameter" } },
                "type": { "enum": ["error", "warning", "info"], "type": "string" }
            }
        },
        "Parameter": { "type": "object", "properties": { "name": { "type": "string" }, "value": { "type": "string" } } },
        "FieldTags": {
            "type": "object",
            "properties": { "fields": { "type": "array", "items": { "$ref": "#/definitions/FieldTag" } } }
        },
        "FieldTag": {
            "type": "object",
            "properties": { "name": { "type": "string" }, "ids": { "type": "array", "items": { "type": "string" } } }
        },
        "ResolveIdsResult": {
            "type": "object",
            "properties": { "resolveIdResults": { "type": "array", "items": { "$ref": "#/definitions/ResolveIdResult" } } }
        },
        "ResolveIdResult": {
            "type": "object",
            "properties": {
                "messages": { "type": "array", "items": { "$ref": "#/definitions/Message" } },
                "fieldName": { "type": "string" },
                "tags": { "type": "array", "items": { "$ref": "#/definitions/Tag" } }
            }
        },
        "RetrieveTagsStructureResult": {
            "type": "object",
            "properties": {
                "tags": { "type": "array", "items": { "$ref": "#/definitions/StructureTag" } },
                "relations": { "type": "array", "items": { "$ref": "#/definitions/TagRelation" } },
                "messages": { "type": "array", "items": { "$ref": "#/definitions/Message" } }
            }
        },
        "StructureTag": {
            "type": "object",
            "properties": {
                "id": { "type": "string" },
                "label": { "type": "string" },
                "isSelectable": { "type": "boolean" },
                "description": { "type": "string" }
            }
        },
        "TagRelation": { "type": "object", "properties": { "fromId": { "type": "string" }, "toId": { "type": "string" } } },
        "SearchResults": {
            "type": "object",
            "properties": {
                "items": { "type": "array", "items": { "$ref": "#/definitions/SearchResult" } },
                "totalHits": { "format": "int64", "type": "integer" }
            }
        },
        "SearchResult": {
            "type": "object",
            "properties": {
                "languageCardId": { "format": "int64", "type": "integer" },
                "logicalId": { "type": "string" },
                "type": {
                    "enum": ["none", "module", "master", "library", "illustration", "template", "publication"],
                    "type": "string"
                },
                "language": { "type": "string" },
                "version": { "type": "string" },
                "resolution": { "type": "string" },
                "title": { "type": "string" },
                "folderPath": { "$ref": "#/definitions/FolderPath" },
                "score": { "format": "double", "type": "number" }
            }
        },
        "PublicationMetadataParameters": {
            "type": "object",
            "properties": {
                "publicationId": { "type": "string" },
                "publicationVersion": { "type": "string" },
                "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" }
            }
        },
        "PublicationMetadata": {
            "type": "object",
            "properties": {
                "metadata": { "$ref": "#/definitions/ResolvedMetadata" },
                "logicalId": { "type": "string" },
                "version": { "type": "string" },
                "logicalCardId": { "format": "int64", "type": "integer" },
                "versionCardId": { "format": "int64", "type": "integer" },
                "languageCardId": { "format": "int64", "type": "integer" },
                "objectType": { "type": "string" }
            }
        },
        "ApplicationHostSettings": {
            "type": "object",
            "properties": { "enrichUri": { "type": "string" }, "reachUri": { "type": "string" }, "ugcUri": { "type": "string" } }
        },
        "EnrichSettings": { "type": "object", "properties": { "uri": { "type": "string" } } },
        "ReachConfig": {
            "type": "object",
            "properties": {
                "url": { "type": "string" },
                "reachRelativeUrl": { "type": "string" },
                "architectRelativeUrl": { "type": "string" }
            }
        },
        "XopusConfig": {
            "type": "object",
            "properties": {
                "version": { "type": "string" },
                "import": { "$ref": "#/definitions/Import" },
                "catalog": { "$ref": "#/definitions/Catalog" },
                "changeTracking": { "$ref": "#/definitions/ChangeTracking" },
                "nodeConfig": { "$ref": "#/definitions/NodeConfig" },
                "javascript": { "$ref": "#/definitions/Javascript" },
                "lookupConfig": { "$ref": "#/definitions/LookupConfig" },
                "miscellaneous": { "$ref": "#/definitions/Miscellaneous" },
                "spellChecker": { "$ref": "#/definitions/SpellChecker" },
                "overlay": { "$ref": "#/definitions/Overlay" },
                "pipeline": { "$ref": "#/definitions/Pipeline" },
                "validation": { "$ref": "#/definitions/Validation" }
            }
        },
        "Import": { "type": "object", "properties": { "source": { "type": "string" } } },
        "Catalog": { "type": "object", "properties": { "source": { "type": "string" } } },
        "ChangeTracking": {
            "type": "object",
            "properties": {
                "visible": { "type": "boolean" },
                "enabled": { "type": "boolean" },
                "allowAccept": { "type": "boolean" },
                "allowReject": { "type": "boolean" }
            }
        },
        "NodeConfig": {
            "type": "object",
            "properties": { "node": { "type": "array", "items": { "$ref": "#/definitions/NodeConfigNode" } } }
        },
        "Javascript": { "type": "object", "properties": { "source": { "type": "string" }, "content": { "type": "string" } } },
        "LookupConfig": {
            "type": "object",
            "properties": { "lookup": { "type": "array", "items": { "$ref": "#/definitions/LookupConfigLookup" } } }
        },
        "Miscellaneous": {
            "type": "object",
            "properties": {
                "attentionBorders": { "type": "boolean" },
                "debugMode": { "type": "boolean" },
                "disableContextMenu": { "type": "boolean" },
                "disableQuickInsertMenu": { "type": "boolean" },
                "extensiveInsertMenu": { "type": "boolean" },
                "hideStatusbar": { "type": "boolean" },
                "ignoreUnsavedChanges": { "type": "boolean" },
                "reproducerSupportEmailAddress": { "type": "string" },
                "saveWithIndentation": { "type": "string" },
                "hideMaximizeViewportButton": { "type": "boolean" },
                "skipPrecalculationForNS": { "type": "string" },
                "useSchemaOrderInUI": { "type": "string" }
            }
        },
        "SpellChecker": { "type": "object", "properties": { "defaultLanguage": { "type": "string" } } },
        "Overlay": {
            "type": "object",
            "properties": { "ribbonElements": { "type": "array", "items": { "$ref": "#/definitions/OverlayRibbonElement" } } }
        },
        "Validation": {
            "type": "object",
            "properties": { "autoMakeValid": { "type": "boolean" }, "validateSimpleTypes": { "type": "boolean" } }
        },
        "NodeConfigNode": {
            "type": "object",
            "properties": {
                "match": { "type": "string" },
                "description": { "type": "string" },
                "enumeration": { "$ref": "#/definitions/NodeConfigNodeEnumeration" },
                "invalidValueMessage": { "type": "boolean" },
                "inputType": { "type": "string" },
                "lookup": { "type": "array", "items": { "$ref": "#/definitions/LookupConfigLookup" } },
                "name": { "type": "array", "items": { "$ref": "#/definitions/NodeConfigElementWithLang" } },
                "placeholder": { "type": "array", "items": { "$ref": "#/definitions/NodeConfigElementWithLang" } },
                "role": { "type": "string" },
                "templates": { "$ref": "#/definitions/NodeConfigNodeTemplates" },
                "uiGroup": { "type": "string" }
            }
        },
        "LookupConfigLookup": {
            "type": "object",
            "properties": {
                "parentPattern": { "type": "string" },
                "name": { "type": "string" },
                "url": { "type": "string" },
                "forceLooup": { "type": "boolean" },
                "autoOpen": { "type": "boolean" }
            }
        },
        "OverlayRibbonElement": {
            "type": "object",
            "properties": {
                "type": { "type": "string", "readOnly": true },
                "after": { "type": "string" },
                "before": { "type": "string" },
                "id": { "type": "string" },
                "label": { "type": "string" }
            }
        },
        "NodeConfigNodeEnumeration": {
            "type": "object",
            "properties": { "value": { "type": "string" }, "name": { "$ref": "#/definitions/NodeConfigElementWithLang" } }
        },
        "NodeConfigElementWithLang": {
            "type": "object",
            "properties": { "lang": { "type": "string" }, "value": { "type": "string" } }
        },
        "NodeConfigNodeTemplates": {
            "type": "object",
            "properties": { "template": { "type": "array", "items": { "$ref": "#/definitions/NodeConfigNodeTemplate" } } }
        },
        "NodeConfigNodeTemplate": {
            "type": "object",
            "properties": { "color": { "type": "string" }, "value": { "type": "string" } }
        },
        "SettingsMetadataParameters": {
            "type": "object",
            "properties": { "requestedMetadata": { "$ref": "#/definitions/RequestedMetadata" } }
        },
        "SettingsMetadata": { "type": "object", "properties": { "metadata": { "$ref": "#/definitions/ResolvedMetadata" } } },
        "CollectiveSpacesConfig": {
            "required": [
                "fileAssociations",
                "previewResolution",
                "collectiveSpacesConfiguration",
                "supportedUiLanguages",
                "experienceConfiguration"
            ],
            "type": "object",
            "properties": {
                "fileAssociations": { "type": "array", "items": { "$ref": "#/definitions/FileExtensionAssociation" } },
                "previewResolution": { "type": "string" },
                "collectiveSpacesConfiguration": { "$ref": "#/definitions/CollectiveSpacesXmlConfiguration" },
                "supportedUiLanguages": { "type": "object", "additionalProperties": { "type": "string" } },
                "experienceConfiguration": { "$ref": "#/definitions/CollectiveSpacesExperienceConfig" }
            }
        },
        "FileExtensionAssociation": {
            "required": ["fileExtension", "editorTemplateId"],
            "type": "object",
            "properties": { "fileExtension": { "type": "string" }, "editorTemplateId": { "type": "string" } }
        },
        "CollectiveSpacesXmlConfiguration": {
            "required": ["draftSpaceSettings"],
            "type": "object",
            "properties": {
                "commonSettings": { "$ref": "#/definitions/CommonCollectiveSpacesSettings" },
                "draftSpaceSettings": { "$ref": "#/definitions/DraftSpaceSettings" },
                "reviewSpaceSettings": { "$ref": "#/definitions/ReviewSpaceSettings" }
            }
        },
        "CollectiveSpacesExperienceConfig": {
            "required": ["behaviorConfigXml", "schemaLocationConfigXml"],
            "type": "object",
            "properties": { "behaviorConfigXml": { "type": "string" }, "schemaLocationConfigXml": { "type": "string" } }
        },
        "CommonCollectiveSpacesSettings": { "type": "object", "properties": {} },
        "DraftSpaceSettings": {
            "required": ["imageUpload"],
            "type": "object",
            "properties": { "imageUpload": { "$ref": "#/definitions/ImageUploadSettings" } }
        },
        "ReviewSpaceSettings": { "type": "object", "properties": {} },
        "ImageUploadSettings": {
            "required": ["isEnabled", "preferredResolution"],
            "type": "object",
            "properties": {
                "isEnabled": { "type": "boolean" },
                "preferredResolution": { "$ref": "#/definitions/PreferredResolution" }
            }
        },
        "PreferredResolution": {
            "required": ["ishValueType", "value"],
            "type": "object",
            "properties": { "ishValueType": { "type": "string" }, "value": { "type": "string" } }
        },
        "DocumentHistoryRequest": {
            "type": "object",
            "properties": { "data": { "$ref": "#/definitions/DocumentHistoryRequestParameters" } }
        },
        "DocumentHistoryRequestParameters": {
            "type": "object",
            "properties": {
                "publicationId": { "type": "string" },
                "language": { "type": "string" },
                "version": { "type": "string" },
                "resolution": { "type": "string" }
            }
        },
        "DocumentHistoryInfo": {
            "type": "object",
            "properties": { "revisions": { "type": "array", "items": { "$ref": "#/definitions/DocumentRevisionInfo" } } }
        },
        "DocumentRevisionInfo": {
            "type": "object",
            "properties": {
                "id": { "type": "string", "readOnly": true },
                "lastModifiedTimestamp": { "format": "date-time", "type": "string", "readOnly": true },
                "author": { "$ref": "#/definitions/DocumentRevisionAuthor", "readOnly": true }
            }
        },
        "DocumentRevisionAuthor": {
            "type": "object",
            "properties": { "id": { "type": "string", "readOnly": true }, "displayName": { "type": "string", "readOnly": true } }
        },
        "UserPreferenceSet": {
            "required": ["name", "items"],
            "type": "object",
            "properties": {
                "name": { "type": "string" },
                "items": { "type": "array", "items": { "$ref": "#/definitions/UserPreferenceItem" } }
            }
        },
        "UserPreferenceItem": {
            "required": ["name", "value"],
            "type": "object",
            "properties": { "name": { "type": "string" }, "value": { "type": "string" } }
        },
        "FormField": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/FormChild" },
                {
                    "type": "object",
                    "properties": {
                        "displayType": { "$ref": "#/definitions/DisplayType" },
                        "allowDuplicates": { "type": "boolean" },
                        "hidden": { "type": "boolean" },
                        "mandatory": { "type": "boolean" },
                        "pattern": { "$ref": "#/definitions/Pattern" },
                        "readOnly": { "type": "boolean" },
                        "name": { "type": "string" },
                        "requestedField": { "$ref": "#/definitions/RequestedField" },
                        "typeName": { "type": "string", "readOnly": true },
                        "label": { "$ref": "#/definitions/TranslatableValue" },
                        "description": { "$ref": "#/definitions/TranslatableValue" }
                    }
                }
            ],
            "properties": {}
        },
        "DisplayType": {
            "required": ["discriminator"],
            "type": "object",
            "properties": { "typeName": { "type": "string", "readOnly": true }, "discriminator": { "type": "string" } },
            "discriminator": "discriminator"
        },
        "Pattern": {
            "type": "object",
            "properties": { "type": { "enum": ["formatString", "regex"], "type": "string" }, "value": { "type": "string" } }
        },
        "RequestedField": { "type": "object", "properties": { "name": { "type": "string" }, "level": { "type": "string" } } },
        "FormGroup": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/FormChild" },
                {
                    "type": "object",
                    "properties": {
                        "expandState": { "enum": ["none", "expanded", "collapsed"], "type": "string" },
                        "items": { "type": "array", "items": { "$ref": "#/definitions/FormChild" } },
                        "typeName": { "type": "string", "readOnly": true },
                        "label": { "$ref": "#/definitions/TranslatableValue" },
                        "description": { "$ref": "#/definitions/TranslatableValue" }
                    }
                }
            ],
            "properties": {}
        },
        "FormLeaf": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/FormChild" },
                {
                    "type": "object",
                    "properties": {
                        "name": { "type": "string" },
                        "requestedField": { "$ref": "#/definitions/RequestedField" },
                        "typeName": { "type": "string", "readOnly": true },
                        "label": { "$ref": "#/definitions/TranslatableValue" },
                        "description": { "$ref": "#/definitions/TranslatableValue" }
                    }
                }
            ],
            "properties": {}
        },
        "FormTab": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/FormChild" },
                {
                    "type": "object",
                    "properties": {
                        "items": { "type": "array", "items": { "$ref": "#/definitions/FormChild" } },
                        "typeName": { "type": "string", "readOnly": true },
                        "label": { "$ref": "#/definitions/TranslatableValue" },
                        "description": { "$ref": "#/definitions/TranslatableValue" }
                    }
                }
            ],
            "properties": {}
        },
        "FormContainer": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/FormChild" },
                {
                    "type": "object",
                    "properties": {
                        "items": { "type": "array", "items": { "$ref": "#/definitions/FormChild" } },
                        "typeName": { "type": "string", "readOnly": true },
                        "label": { "$ref": "#/definitions/TranslatableValue" },
                        "description": { "$ref": "#/definitions/TranslatableValue" }
                    }
                }
            ],
            "properties": {}
        },
        "BaseList": {
            "required": ["discriminator"],
            "type": "object",
            "properties": { "typeName": { "type": "string", "readOnly": true }, "discriminator": { "type": "string" } },
            "discriminator": "discriminator"
        },
        "BaselineList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "ElectronicDocumentTypeList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "EnumList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "items": { "type": "array", "items": { "$ref": "#/definitions/ValueListItem" } },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "LovList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "lovReference": { "type": "string" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TagList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "name": { "type": "string" },
                        "level": { "type": "string" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TransitionStateList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "TranslationTemplatesList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "UserGroupList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "UserList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                        "restrictUserGroup": { "type": "boolean" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "UserRoleList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                {
                    "type": "object",
                    "properties": {
                        "activityFilter": { "enum": ["none", "active", "inactive"], "type": "string" },
                        "metadataFilter": { "$ref": "#/definitions/MetadataFilter" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "VersionList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/BaseList" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "TypeCheckBox": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "checkedValue": { "type": "string" },
                        "uncheckedValue": { "type": "string" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypeCondition": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": { "assist": { "type": "boolean" }, "typeName": { "type": "string", "readOnly": true } }
                }
            ],
            "properties": {}
        },
        "TypeCustom": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "TypeDate": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "TypeFile": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "valueList": { "$ref": "#/definitions/ValueList" },
                        "assist": { "type": "boolean" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "ValueList": {
            "type": "object",
            "properties": {
                "list": { "$ref": "#/definitions/BaseList" },
                "isStatic": { "type": "boolean" },
                "sortOrder": { "enum": ["none", "ascending", "descending"], "type": "string" }
            }
        },
        "TypeLabel": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                { "type": "object", "properties": { "typeName": { "type": "string", "readOnly": true } } }
            ],
            "properties": {}
        },
        "TypeMultilineText": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "lines": { "format": "int32", "type": "integer" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypeNumeric": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "decimalPlaces": { "format": "int32", "type": "integer" },
                        "increment": { "format": "double", "type": "number" },
                        "minimum": { "format": "double", "type": "number" },
                        "maximum": { "format": "double", "type": "number" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypeOptions": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "valueList": { "$ref": "#/definitions/ValueList" },
                        "flowDirection": { "enum": ["vertical", "horizontal"], "type": "string" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypePullDown": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "valueList": { "$ref": "#/definitions/ValueList" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypeReference": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "selectableTypes": { "type": "array", "items": { "type": "string" } },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "TypeTagList": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": {
                        "autosuggest": { "$ref": "#/definitions/Autosuggest" },
                        "recentCache": { "type": "boolean" },
                        "structureView": { "$ref": "#/definitions/StructureView" },
                        "valuePanel": { "$ref": "#/definitions/ValuePanel" },
                        "typeName": { "type": "string", "readOnly": true }
                    }
                }
            ],
            "properties": {}
        },
        "Autosuggest": { "type": "object", "properties": { "valueList": { "$ref": "#/definitions/ValueList" } } },
        "StructureView": { "type": "object", "properties": { "valueList": { "$ref": "#/definitions/ValueList" } } },
        "ValuePanel": { "type": "object", "properties": { "valueList": { "$ref": "#/definitions/ValueList" } } },
        "TypeText": {
            "type": "object",
            "allOf": [
                { "$ref": "#/definitions/DisplayType" },
                {
                    "type": "object",
                    "properties": { "password": { "type": "boolean" }, "typeName": { "type": "string", "readOnly": true } }
                }
            ],
            "properties": {}
        }
    }
}
