// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generation v2 javascript file(./test/result/v2/javascript/core/ApiError.js): ./test/result/v2/javascript/core/ApiError.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from \\"./isSuccess\\";

export class ApiError extends Error {

    constructor(result, message) {
        super(message);

        this.url = result.url;
        this.status = result.status;
        this.statusText = result.statusText;
        this.body = result.body;
    }
}

(function (ApiError) {
    let Message;
    (function (Message) {
        Message.BAD_REQUEST = 'Bad Request';
        Message.UNAUTHORIZED = 'Unauthorized';
        Message.FORBIDDEN = 'Forbidden';
        Message.NOT_FOUND = 'Not Found';
        Message.INTERNAL_SERVER_ERROR = 'Internal Server Error';
        Message.BAD_GATEWAY = 'Bad Gateway';
        Message.SERVICE_UNAVAILABLE = 'Service Unavailable';
        Message.GENERIC_ERROR = 'Generic Error';
    })(Message = ApiError.Message || (ApiError.Message = {}));
})(ApiError || (ApiError = {}));

/**
 * Catch common errors (based on status code).
 * @param result
 */
export function catchGenericError(result) {

    switch (result.status) {
        case 400: throw new ApiError(result, ApiError.Message.BAD_REQUEST);
        case 401: throw new ApiError(result, ApiError.Message.UNAUTHORIZED);
        case 403: throw new ApiError(result, ApiError.Message.FORBIDDEN);
        case 404: throw new ApiError(result, ApiError.Message.NOT_FOUND);
        case 500: throw new ApiError(result, ApiError.Message.INTERNAL_SERVER_ERROR);
        case 502: throw new ApiError(result, ApiError.Message.BAD_GATEWAY);
        case 503: throw new ApiError(result, ApiError.Message.SERVICE_UNAVAILABLE);
    }

    if (!isSuccess(result.status)) {
        throw new ApiError(result, ApiError.Message.GENERIC_ERROR);
    }
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/OpenAPI.js): ./test/result/v2/javascript/core/OpenAPI.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export let OpenAPI;
(function (OpenAPI) {
    OpenAPI.BASE = 'http://localhost:8080/api';
    OpenAPI.VERSION = '9.0';
    OpenAPI.CLIENT = 'xhr';
    OpenAPI.TOKEN = '';
})(OpenAPI || (OpenAPI = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/getFormData.js): ./test/result/v2/javascript/core/getFormData.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get FormData from object. This method is needed to upload
 * multipart form data to the REST API.
 * @param params Key value based object.
 */
export function getFormData(params) {
    const formData = new FormData();
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value = params[key];
            if (value !== undefined && value !== null) {
                formData.append(key, value);
            }
        }
    }
    return formData;
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/getQueryString.js): ./test/result/v2/javascript/core/getQueryString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get query string from query parameters object. This method also
 * supports multi-value items by creating a key for each item.
 * @param params Key value based object.
 */
export function getQueryString(params) {
    const qs = [];
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value = params[key];
            if (value !== undefined && value !== null) {
                if (Array.isArray(value)) {
                    value.forEach(value => {
                        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                    });
                } else {
                    qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                }
            }
        }
    }
    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }
    return '';
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/isSuccess.js): ./test/result/v2/javascript/core/isSuccess.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Check success response code.
 * @param status Status code
 */
export function isSuccess(status) {
    return status >= 200 && status < 300;
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/request.js): ./test/result/v2/javascript/core/request.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import {getFormData} from './getFormData';
import {getQueryString} from './getQueryString';
import {OpenAPI} from './OpenAPI';
import {requestUsingFetch} from './requestUsingFetch';
import {requestUsingXHR} from './requestUsingXHR';

/**
 * Create the request.
 * @param options Request method options.
 * @returns Result object (see above)
 */
export async function request(options) {

    // Create the request URL
    let url = \`\${OpenAPI.BASE}\${options.path}\`;

    // Create request headers
    const headers = new Headers({
        ...options.headers,
        Accept: 'application/json'
    });

    // Create request settings
    const request = {
        headers,
        method: options.method,
        credentials: 'same-origin'
    };

    // If we have a bearer token then we set the authentication header.
    if (OpenAPI.TOKEN !== null && OpenAPI.TOKEN !== '') {
        headers.append('Authorization', \`Bearer \${OpenAPI.TOKEN}\`);
    }

    // Add the query parameters (if defined).
    if (options.query) {
        url += getQueryString(options.query);
    }

    // Append formData as body
    if (options.formData) {
        request.body = getFormData(options.formData);
    } else if (options.body) {

        // If this is blob data, then pass it directly to the body and set content type.
        // Otherwise we just convert request data to JSON string (needed for fetch api)
        if (options.body instanceof Blob) {
            request.body = options.body;
            if (options.body.type) {
                headers.append('Content-Type', options.body.type);
            }
        } else {
            request.body = JSON.stringify(options.body);
            headers.append('Content-Type', 'application/json');
        }
    }

    try {
        switch (OpenAPI.CLIENT) {
            case 'xhr':
                return await requestUsingXHR(url, request);
            default:
                return await requestUsingFetch(url, request);
        }
    } catch (error) {
        return {
            url,
            ok: false,
            status: 0,
            statusText: '',
            body: error
        };
    }
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/requestUsingFetch.js): ./test/result/v2/javascript/core/requestUsingFetch.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Request content using the new Fetch API. This is the default API that is used and
 * is create for all JSON, XML and text objects. However it is limited to UTF-8.
 * This is a problem for some of the Docs content, since that requires UTF-16!
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingFetch(url, request) {

    // Fetch response using fetch API.
    const response = await fetch(url, request);

    // Create result object.
    const result = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: null
    };

    // Try to parse the content for any response status code.
    // We check the \\"Content-Type\\" header to see if we need to parse the
    // content as json or as plain text.
    const contentType = response.headers.get('Content-Type');
    if (contentType) {
        switch (contentType.toLowerCase()) {
            case 'application/json':
            case 'application/json; charset=utf-8':
                result.body = await response.json();
                break;

            case 'text/plain':
            case 'text/xml':
            case 'text/xml; charset=utf-8':
            case 'text/xml; charset=utf-16':
                result.body = await response.text();
                break;
        }
    }

    return result;
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/core/requestUsingXHR.js): ./test/result/v2/javascript/core/requestUsingXHR.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from './isSuccess';

/**
 * Request content using the new legacy XMLHttpRequest API. This method is useful
 * when we want to request UTF-16 content, since it natively supports loading UTF-16.
 * We could do the same with the Fetch API, but then we will need to convert the
 * content using JavaScript... And that is very very slow.
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingXHR(url, request) {
    return new Promise(resolve => {
        const xhr = new XMLHttpRequest();

        // Open the request, remember to do this before adding any headers,
        // because the request needs to be initialized!
        xhr.open(request.method, url, true);

        // Add the headers (required when dealing with JSON)
        const headers = request.headers as Headers;
        headers.forEach((value, key) => {
            xhr.setRequestHeader(key, value);
        });

        // Register the readystate handler, this will fire when the request is done.
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {

                // Create result object.
                const result = {
                    url,
                    ok: isSuccess(xhr.status),
                    status: xhr.status,
                    statusText: xhr.statusText,
                    body: null
                };

                // Try to parse the content for any response status code.
                // We check the \\"Content-Type\\" header to see if we need to parse the
                // content as json or as plain text.
                const contentType = xhr.getResponseHeader('Content-Type');
                if (contentType) {
                    switch (contentType.toLowerCase()) {
                        case 'application/json':
                        case 'application/json; charset=utf-8':
                            result.body = JSON.parse(xhr.responseText);
                            break;

                        case 'text/plain':
                        case 'text/xml':
                        case 'text/xml; charset=utf-8':
                        case 'text/xml; charset=utf-16':
                            result.body = xhr.responseText;
                            break;
                    }
                }

                // Done!
                resolve(result);
            }
        };

        // Start the request!
        xhr.send(request.body);
    });
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/index.js): ./test/result/v2/javascript/index.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export { ApiError } from './core/ApiError';
export { isSuccess } from './core/isSuccess';
export { OpenAPI } from './core/OpenAPI';

import { ArrayWithArray } from './models/ArrayWithArray';
import { ArrayWithBooleans } from './models/ArrayWithBooleans';
import { ArrayWithNumbers } from './models/ArrayWithNumbers';
import { ArrayWithProperties } from './models/ArrayWithProperties';
import { ArrayWithReferences } from './models/ArrayWithReferences';
import { ArrayWithStrings } from './models/ArrayWithStrings';
import { Dictionary } from './models/Dictionary';
import { DictionaryWithArray } from './models/DictionaryWithArray';
import { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
import { DictionaryWithProperties } from './models/DictionaryWithProperties';
import { DictionaryWithReference } from './models/DictionaryWithReference';
import { DictionaryWithString } from './models/DictionaryWithString';
import { EnumFromDescription } from './models/EnumFromDescription';
import { EnumWithNumbers } from './models/EnumWithNumbers';
import { EnumWithStrings } from './models/EnumWithStrings';
import { ModelLink } from './models/ModelLink';
import { ModelThatExtends } from './models/ModelThatExtends';
import { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
import { ModelWithArray } from './models/ModelWithArray';
import { ModelWithBoolean } from './models/ModelWithBoolean';
import { ModelWithCircularReference } from './models/ModelWithCircularReference';
import { ModelWithDictionary } from './models/ModelWithDictionary';
import { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
import { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
import { ModelWithEnum } from './models/ModelWithEnum';
import { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
import { ModelWithInteger } from './models/ModelWithInteger';
import { ModelWithLink } from './models/ModelWithLink';
import { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
import { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
import { ModelWithProperties } from './models/ModelWithProperties';
import { ModelWithReference } from './models/ModelWithReference';
import { ModelWithString } from './models/ModelWithString';
import { SimpleBoolean } from './models/SimpleBoolean';
import { SimpleFile } from './models/SimpleFile';
import { SimpleInteger } from './models/SimpleInteger';
import { SimpleReference } from './models/SimpleReference';
import { SimpleString } from './models/SimpleString';

export { ArrayWithArray };
export { ArrayWithBooleans };
export { ArrayWithNumbers };
export { ArrayWithProperties };
export { ArrayWithReferences };
export { ArrayWithStrings };
export { Dictionary };
export { DictionaryWithArray };
export { DictionaryWithDictionary };
export { DictionaryWithProperties };
export { DictionaryWithReference };
export { DictionaryWithString };
export { EnumFromDescription };
export { EnumWithNumbers };
export { EnumWithStrings };
export { ModelLink };
export { ModelThatExtends };
export { ModelThatExtendsExtends };
export { ModelWithArray };
export { ModelWithBoolean };
export { ModelWithCircularReference };
export { ModelWithDictionary };
export { ModelWithDuplicateImports };
export { ModelWithDuplicateProperties };
export { ModelWithEnum };
export { ModelWithEnumFromDescription };
export { ModelWithInteger };
export { ModelWithLink };
export { ModelWithNestedEnums };
export { ModelWithNestedProperties };
export { ModelWithProperties };
export { ModelWithReference };
export { ModelWithString };
export { SimpleBoolean };
export { SimpleFile };
export { SimpleInteger };
export { SimpleReference };
export { SimpleString };

export { ComplexService } from './services/ComplexService';
export { DefaultsService } from './services/DefaultsService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';

const schemas = {
    'ArrayWithArray': ArrayWithArray.schema,
    'ArrayWithBooleans': ArrayWithBooleans.schema,
    'ArrayWithNumbers': ArrayWithNumbers.schema,
    'ArrayWithProperties': ArrayWithProperties.schema,
    'ArrayWithReferences': ArrayWithReferences.schema,
    'ArrayWithStrings': ArrayWithStrings.schema,
    'Dictionary': Dictionary.schema,
    'DictionaryWithArray': DictionaryWithArray.schema,
    'DictionaryWithDictionary': DictionaryWithDictionary.schema,
    'DictionaryWithProperties': DictionaryWithProperties.schema,
    'DictionaryWithReference': DictionaryWithReference.schema,
    'DictionaryWithString': DictionaryWithString.schema,
    'EnumFromDescription': EnumFromDescription.schema,
    'EnumWithNumbers': EnumWithNumbers.schema,
    'EnumWithStrings': EnumWithStrings.schema,
    'ModelLink': ModelLink.schema,
    'ModelThatExtends': ModelThatExtends.schema,
    'ModelThatExtendsExtends': ModelThatExtendsExtends.schema,
    'ModelWithArray': ModelWithArray.schema,
    'ModelWithBoolean': ModelWithBoolean.schema,
    'ModelWithCircularReference': ModelWithCircularReference.schema,
    'ModelWithDictionary': ModelWithDictionary.schema,
    'ModelWithDuplicateImports': ModelWithDuplicateImports.schema,
    'ModelWithDuplicateProperties': ModelWithDuplicateProperties.schema,
    'ModelWithEnum': ModelWithEnum.schema,
    'ModelWithEnumFromDescription': ModelWithEnumFromDescription.schema,
    'ModelWithInteger': ModelWithInteger.schema,
    'ModelWithLink': ModelWithLink.schema,
    'ModelWithNestedEnums': ModelWithNestedEnums.schema,
    'ModelWithNestedProperties': ModelWithNestedProperties.schema,
    'ModelWithProperties': ModelWithProperties.schema,
    'ModelWithReference': ModelWithReference.schema,
    'ModelWithString': ModelWithString.schema,
    'SimpleBoolean': SimpleBoolean.schema,
    'SimpleFile': SimpleFile.schema,
    'SimpleInteger': SimpleInteger.schema,
    'SimpleReference': SimpleReference.schema,
    'SimpleString': SimpleString.schema,
};

export function getSchema(schema) {
    if (schemas.hasOwnProperty(schema)) {
        return schemas[schema];
    }
    return null;
}
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithArray.js): ./test/result/v2/javascript/models/ArrayWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array containing an array
 */
export let ArrayWithArray;
(function (ArrayWithArray) {

    ArrayWithArray.schema = {
        type: 'Array',
        item: {
            type: 'Array',
            item: 'ModelWithString',
        },
    };

})(ArrayWithArray || (ArrayWithArray = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithBooleans.js): ./test/result/v2/javascript/models/ArrayWithBooleans.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with booleans
 */
export let ArrayWithBooleans;
(function (ArrayWithBooleans) {

    ArrayWithBooleans.schema = {
        type: 'Array',
        item: {
            type: 'boolean',
        },
    };

})(ArrayWithBooleans || (ArrayWithBooleans = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithNumbers.js): ./test/result/v2/javascript/models/ArrayWithNumbers.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with numbers
 */
export let ArrayWithNumbers;
(function (ArrayWithNumbers) {

    ArrayWithNumbers.schema = {
        type: 'Array',
        item: {
            type: 'number',
        },
    };

})(ArrayWithNumbers || (ArrayWithNumbers = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithProperties.js): ./test/result/v2/javascript/models/ArrayWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with properties
 */
export let ArrayWithProperties;
(function (ArrayWithProperties) {

    ArrayWithProperties.schema = {
        type: 'Array',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

})(ArrayWithProperties || (ArrayWithProperties = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithReferences.js): ./test/result/v2/javascript/models/ArrayWithReferences.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with references
 */
export let ArrayWithReferences;
(function (ArrayWithReferences) {

    ArrayWithReferences.schema = {
        type: 'Array',
        item: 'ModelWithString',
    };

})(ArrayWithReferences || (ArrayWithReferences = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ArrayWithStrings.js): ./test/result/v2/javascript/models/ArrayWithStrings.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with strings
 */
export let ArrayWithStrings;
(function (ArrayWithStrings) {

    ArrayWithStrings.schema = {
        type: 'Array',
        item: {
            type: 'string',
        },
    };

})(ArrayWithStrings || (ArrayWithStrings = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/Dictionary.js): ./test/result/v2/javascript/models/Dictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export let Dictionary;
(function (Dictionary) {

    Dictionary.schema = {
        type: 'Dictionary',
        item: {
            type: 'any'
        }
    };

})(Dictionary || (Dictionary = {}));
"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/DictionaryWithArray.js): ./test/result/v2/javascript/models/DictionaryWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a complex dictionary
 */
export let DictionaryWithArray;
(function (DictionaryWithArray) {

    DictionaryWithArray.schema = {
        type: 'Dictionary',
        item: {
            type: 'Array',
            item: 'ModelWithString',
        },
    };

})(DictionaryWithArray || (DictionaryWithArray = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/DictionaryWithDictionary.js): ./test/result/v2/javascript/models/DictionaryWithDictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string dictionary
 */
export let DictionaryWithDictionary;
(function (DictionaryWithDictionary) {

    DictionaryWithDictionary.schema = {
        type: 'Dictionary',
        item: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

})(DictionaryWithDictionary || (DictionaryWithDictionary = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/DictionaryWithProperties.js): ./test/result/v2/javascript/models/DictionaryWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a complex dictionary
 */
export let DictionaryWithProperties;
(function (DictionaryWithProperties) {

    DictionaryWithProperties.schema = {
        type: 'Dictionary',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

})(DictionaryWithProperties || (DictionaryWithProperties = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/DictionaryWithReference.js): ./test/result/v2/javascript/models/DictionaryWithReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string reference
 */
export let DictionaryWithReference;
(function (DictionaryWithReference) {

    DictionaryWithReference.schema = {
        type: 'Dictionary',
        item: 'ModelWithString',
    };

})(DictionaryWithReference || (DictionaryWithReference = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/DictionaryWithString.js): ./test/result/v2/javascript/models/DictionaryWithString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string dictionary
 */
export let DictionaryWithString;
(function (DictionaryWithString) {

    DictionaryWithString.schema = {
        type: 'Dictionary',
        item: {
            type: 'string',
        },
    };

})(DictionaryWithString || (DictionaryWithString = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/EnumFromDescription.js): ./test/result/v2/javascript/models/EnumFromDescription.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Success=1,Warning=2,Error=3
 */
export let EnumFromDescription;
(function (EnumFromDescription) {

    EnumFromDescription.ERROR = 3;
    EnumFromDescription.SUCCESS = 1;
    EnumFromDescription.WARNING = 2;

    EnumFromDescription.schema = {
        type: 'Enum',
        enums: [
            3,
            1,
            2,
        ],
    };

})(EnumFromDescription || (EnumFromDescription = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/EnumWithNumbers.js): ./test/result/v2/javascript/models/EnumWithNumbers.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple enum with numbers
 */
export let EnumWithNumbers;
(function (EnumWithNumbers) {

    EnumWithNumbers.NUM_1 = 1;
    EnumWithNumbers.NUM_2 = 2;
    EnumWithNumbers.NUM_3 = 3;

    EnumWithNumbers.schema = {
        type: 'Enum',
        enums: [
            1,
            2,
            3,
        ],
    };

})(EnumWithNumbers || (EnumWithNumbers = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/EnumWithStrings.js): ./test/result/v2/javascript/models/EnumWithStrings.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple enum with strings
 */
export let EnumWithStrings;
(function (EnumWithStrings) {

    EnumWithStrings.ERROR = 'Error';
    EnumWithStrings.SUCCESS = 'Success';
    EnumWithStrings.WARNING = 'Warning';

    EnumWithStrings.schema = {
        type: 'Enum',
        enums: [
            'Error',
            'Success',
            'Warning',
        ],
    };

})(EnumWithStrings || (EnumWithStrings = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelLink.js): ./test/result/v2/javascript/models/ModelLink.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that can have a template??
 */
export let ModelLink;
(function (ModelLink) {

    ModelLink.schema = {
        id: {
            type: 'string',
        },
    };

})(ModelLink || (ModelLink = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelThatExtends.js): ./test/result/v2/javascript/models/ModelThatExtends.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that extends another model
 */
export let ModelThatExtends;
(function (ModelThatExtends) {

    ModelThatExtends.schema = {
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    };

})(ModelThatExtends || (ModelThatExtends = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelThatExtendsExtends.js): ./test/result/v2/javascript/models/ModelThatExtendsExtends.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that extends another model
 */
export let ModelThatExtendsExtends;
(function (ModelThatExtendsExtends) {

    ModelThatExtendsExtends.schema = {
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    };

})(ModelThatExtendsExtends || (ModelThatExtendsExtends = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithArray.js): ./test/result/v2/javascript/models/ModelWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing an array
 */
export let ModelWithArray;
(function (ModelWithArray) {

    ModelWithArray.schema = {
        prop: {
            type: 'Array',
            item: 'ModelWithString',
        },
        propWithFile: {
            type: 'Array',
            item: {
                type: 'File',
            },
        },
        propWithNumber: {
            type: 'Array',
            item: {
                type: 'number',
            },
        },
    };

})(ModelWithArray || (ModelWithArray = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithBoolean.js): ./test/result/v2/javascript/models/ModelWithBoolean.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one boolean property
 */
export let ModelWithBoolean;
(function (ModelWithBoolean) {

    ModelWithBoolean.schema = {
        prop: {
            type: 'boolean',
        },
    };

})(ModelWithBoolean || (ModelWithBoolean = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithCircularReference.js): ./test/result/v2/javascript/models/ModelWithCircularReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a circular reference
 */
export let ModelWithCircularReference;
(function (ModelWithCircularReference) {

    ModelWithCircularReference.schema = {
        prop: {
            type: 'ModelWithCircularReference',
        },
    };

})(ModelWithCircularReference || (ModelWithCircularReference = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithDictionary.js): ./test/result/v2/javascript/models/ModelWithDictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a dictionary
 */
export let ModelWithDictionary;
(function (ModelWithDictionary) {

    ModelWithDictionary.schema = {
        prop: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

})(ModelWithDictionary || (ModelWithDictionary = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithDuplicateImports.js): ./test/result/v2/javascript/models/ModelWithDuplicateImports.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with duplicated imports
 */
export let ModelWithDuplicateImports;
(function (ModelWithDuplicateImports) {

    ModelWithDuplicateImports.schema = {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    };

})(ModelWithDuplicateImports || (ModelWithDuplicateImports = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithDuplicateProperties.js): ./test/result/v2/javascript/models/ModelWithDuplicateProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with duplicated properties
 */
export let ModelWithDuplicateProperties;
(function (ModelWithDuplicateProperties) {

    ModelWithDuplicateProperties.schema = {
        prop: {
            type: 'ModelWithString',
        },
    };

})(ModelWithDuplicateProperties || (ModelWithDuplicateProperties = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithEnum.js): ./test/result/v2/javascript/models/ModelWithEnum.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one enum
 */
export let ModelWithEnum;
(function (ModelWithEnum) {

    /**
     * This is a simple enum with strings
     */
    ModelWithEnum.test = {
        SUCCESS: 'Success',
        WARNING: 'Warning',
        ERROR: 'Error',
    };

    ModelWithEnum.schema = {
        test: {
            type: 'Enum',
            enums: [
                'Success',
                'Warning',
                'Error',
            ],
        },
    };

})(ModelWithEnum || (ModelWithEnum = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithEnumFromDescription.js): ./test/result/v2/javascript/models/ModelWithEnumFromDescription.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one enum
 */
export let ModelWithEnumFromDescription;
(function (ModelWithEnumFromDescription) {

    /**
     * Success=1,Warning=2,Error=3
     */
    ModelWithEnumFromDescription.test = {
        SUCCESS: 1,
        WARNING: 2,
        ERROR: 3,
    };

    ModelWithEnumFromDescription.schema = {
        test: {
            type: 'Enum',
            enums: [
                1,
                2,
                3,
            ],
        },
    };

})(ModelWithEnumFromDescription || (ModelWithEnumFromDescription = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithInteger.js): ./test/result/v2/javascript/models/ModelWithInteger.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one number property
 */
export let ModelWithInteger;
(function (ModelWithInteger) {

    ModelWithInteger.schema = {
        prop: {
            type: 'number',
        },
    };

})(ModelWithInteger || (ModelWithInteger = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithLink.js): ./test/result/v2/javascript/models/ModelWithLink.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that can have a template??
 */
export let ModelWithLink;
(function (ModelWithLink) {

    ModelWithLink.schema = {
        prop: {
            type: 'ModelLink',
        },
    };

})(ModelWithLink || (ModelWithLink = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithNestedEnums.js): ./test/result/v2/javascript/models/ModelWithNestedEnums.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with nested enums
 */
export let ModelWithNestedEnums;
(function (ModelWithNestedEnums) {

    ModelWithNestedEnums.schema = {
        arrayWithDescription: {
            type: 'Array',
            item: {
                type: 'Enum',
                enums: [
                    1,
                    2,
                    3,
                ],
            },
        },
        arrayWithEnum: {
            type: 'Array',
            item: {
                type: 'Enum',
                enums: [
                    'Success',
                    'Warning',
                    'Error',
                ],
            },
        },
        dictionaryWithEnum: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
                enums: [
                    'Success',
                    'Warning',
                    'Error',
                ],
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
                enums: [
                    1,
                    2,
                    3,
                ],
            },
        },
    };

})(ModelWithNestedEnums || (ModelWithNestedEnums = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithNestedProperties.js): ./test/result/v2/javascript/models/ModelWithNestedProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one nested property
 */
export let ModelWithNestedProperties;
(function (ModelWithNestedProperties) {

    ModelWithNestedProperties.schema = {
        first: {
            second: {
                third: {
                    type: 'string',
                    isReadOnly: true,
                    isRequired: true,
                },
                isReadOnly: true,
                isRequired: true,
            },
            isReadOnly: true,
            isRequired: true,
        },
    };

})(ModelWithNestedProperties || (ModelWithNestedProperties = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithProperties.js): ./test/result/v2/javascript/models/ModelWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one nested property
 */
export let ModelWithProperties;
(function (ModelWithProperties) {

    ModelWithProperties.schema = {
        boolean: {
            type: 'boolean',
        },
        number: {
            type: 'number',
        },
        reference: {
            type: 'ModelWithString',
        },
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
    };

})(ModelWithProperties || (ModelWithProperties = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithReference.js): ./test/result/v2/javascript/models/ModelWithReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a reference
 */
export let ModelWithReference;
(function (ModelWithReference) {

    ModelWithReference.schema = {
        prop: {
            type: 'ModelWithString',
        },
    };

})(ModelWithReference || (ModelWithReference = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/ModelWithString.js): ./test/result/v2/javascript/models/ModelWithString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one string property
 */
export let ModelWithString;
(function (ModelWithString) {

    ModelWithString.schema = {
        prop: {
            type: 'string',
        },
    };

})(ModelWithString || (ModelWithString = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/SimpleBoolean.js): ./test/result/v2/javascript/models/SimpleBoolean.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple boolean
 */
export let SimpleBoolean;
(function (SimpleBoolean) {

    SimpleBoolean.schema = {
        type: 'boolean',
    };

})(SimpleBoolean || (SimpleBoolean = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/SimpleFile.js): ./test/result/v2/javascript/models/SimpleFile.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple file
 */
export let SimpleFile;
(function (SimpleFile) {

    SimpleFile.schema = {
        type: 'File',
    };

})(SimpleFile || (SimpleFile = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/SimpleInteger.js): ./test/result/v2/javascript/models/SimpleInteger.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple number
 */
export let SimpleInteger;
(function (SimpleInteger) {

    SimpleInteger.schema = {
        type: 'number',
    };

})(SimpleInteger || (SimpleInteger = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/SimpleReference.js): ./test/result/v2/javascript/models/SimpleReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple reference
 */
export let SimpleReference;
(function (SimpleReference) {

    SimpleReference.schema = {
        type: 'ModelWithString',
    };

})(SimpleReference || (SimpleReference = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/models/SimpleString.js): ./test/result/v2/javascript/models/SimpleString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple string
 */
export let SimpleString;
(function (SimpleString) {

    SimpleString.schema = {
        type: 'string',
    };

})(SimpleString || (SimpleString = {}));"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/ComplexService.js): ./test/result/v2/javascript/services/ComplexService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ComplexService {

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @result ModelWithString Successful response
     * @throws ApiError
     */
    static async complexTypes(
        parameterObject,
        parameterReference,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/complex\`,
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
        });

        if (!result.ok) {
            switch (result.status) {
                case 400: throw new ApiError(result, \`400 server error\`);
                case 500: throw new ApiError(result, \`500 server error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/DefaultsService.js): ./test/result/v2/javascript/services/DefaultsService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string
     * @param parameterNumber This is a simple number
     * @param parameterBoolean This is a simple boolean
     * @param parameterEnum This is a simple enum
     * @param parameterModel This is a simple model
     * @throws ApiError
     */
    static async callWithDefaultParameters(
        parameterString = 'Hello World!',
        parameterNumber = 123,
        parameterBoolean = true,
        parameterEnum = 'Success',
        parameterModel = {
            \\"prop\\": \\"Hello World\\"
        },
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/defaults\`,
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/ParametersService.js): ./test/result/v2/javascript/services/ParametersService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterBody This is the parameter that is send as request body
     * @throws ApiError
     */
    static async callWithParameters(
        parameterHeader,
        parameterQuery,
        parameterForm,
        parameterBody,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/parameters\`,
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: parameterBody,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/ResponseService.js): ./test/result/v2/javascript/services/ResponseService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ResponseService {

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    static async callWithDuplicateResponses() {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    static async callWithResponse() {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @result ModelThatExtends Message for 201 response
     * @result ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    static async callWithResponses() {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/SimpleService.js): ./test/result/v2/javascript/services/SimpleService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class SimpleService {

    /**
     * @throws ApiError
     */
    static async deleteCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'delete',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async getCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async headCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'head',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async optionsCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'options',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async patchCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'patch',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async postCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async putCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 javascript file(./test/result/v2/javascript/services/TypesService.js): ./test/result/v2/javascript/services/TypesService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class TypesService {

    /**
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param id This is a number parameter
     * @result number Response is a simple number
     * @result string Response is a simple string
     * @result boolean Response is a simple boolean
     * @result any Response is a simple object
     * @throws ApiError
     */
    static async types(
        parameterNumber = 123,
        parameterString = 'default',
        parameterBoolean = true,
        parameterObject = null,
        parameterArray,
        parameterDictionary,
        parameterEnum,
        id,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/types\`,
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/ApiError.ts): ./test/result/v2/typescript/core/ApiError.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from './isSuccess';
import { Result } from './Result';

export class ApiError extends Error {

    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;

    constructor(result: Readonly<Result>, message: string) {
        super(message);

        this.url = result.url;
        this.status = result.status;
        this.statusText = result.statusText;
        this.body = result.body;
    }
}

export namespace ApiError {
    export enum Message {
        BAD_REQUEST = 'Bad Request',
        UNAUTHORIZED = 'Unauthorized',
        FORBIDDEN = 'Forbidden',
        NOT_FOUND = 'Not Found',
        INTERNAL_SERVER_ERROR = 'Internal Server Error',
        BAD_GATEWAY = 'Bad Gateway',
        SERVICE_UNAVAILABLE = 'Service Unavailable',
        GENERIC_ERROR = 'Generic Error',
    }
}

/**
 * Catch common errors (based on status code).
 * @param result
 */
export function catchGenericError(result: Result): void {
    switch (result.status) {
        case 400: throw new ApiError(result, ApiError.Message.BAD_REQUEST);
        case 401: throw new ApiError(result, ApiError.Message.UNAUTHORIZED);
        case 403: throw new ApiError(result, ApiError.Message.FORBIDDEN);
        case 404: throw new ApiError(result, ApiError.Message.NOT_FOUND);
        case 500: throw new ApiError(result, ApiError.Message.INTERNAL_SERVER_ERROR);
        case 502: throw new ApiError(result, ApiError.Message.BAD_GATEWAY);
        case 503: throw new ApiError(result, ApiError.Message.SERVICE_UNAVAILABLE);
    }

    if (!isSuccess(result.status)) {
        throw new ApiError(result, ApiError.Message.GENERIC_ERROR);
    }
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/OpenAPI.ts): ./test/result/v2/typescript/core/OpenAPI.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export namespace OpenAPI {
    export let BASE = 'http://localhost:8080/api';
    export let VERSION = '9.0';
    export let CLIENT = 'fetch';
    export let TOKEN = '';
}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/RequestOptions.ts): ./test/result/v2/typescript/core/RequestOptions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export interface RequestOptions {
    method: 'get' | 'put' | 'post' | 'delete' | 'options' | 'head' | 'patch';
    path: string;
    cookies?: { [key: string]: any };
    headers?: { [key: string]: any };
    query?: { [key: string]: any };
    formData?: { [key: string]: any };
    body?: any;
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/Result.ts): ./test/result/v2/typescript/core/Result.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export interface Result {
    url: string;
    ok: boolean;
    status: number;
    statusText: string;
    body: any;
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/Schema.ts): ./test/result/v2/typescript/core/Schema.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Dictionary } from \\"../models/Dictionary\\";

type FieldSchema = {
    readonly type?: string;
    readonly isReadOnly?: boolean;
    readonly isRequired?: boolean;
    readonly isNullable?: boolean;
    readonly format?: 'int32' | 'int64' | 'float' | 'double' | 'string' | 'boolean' | 'byte' | 'binary' | 'date' | 'date-time' | 'password';
    readonly maximum?: number;
    readonly exclusiveMaximum?: boolean;
    readonly minimum?: number;
    readonly exclusiveMinimum?: boolean;
    readonly multipleOf?: number;
    readonly maxLength?: number;
    readonly minLength?: number;
    readonly pattern?: string;
    readonly maxItems?: number;
    readonly minItems?: number;
    readonly uniqueItems?: boolean;
    readonly maxProperties?: number;
    readonly minProperties?: number;
}

type ArraySchema<T> = FieldSchema & {
    readonly item: Schema<T>;
}

type DictionarySchema<T> = FieldSchema & {
    readonly item: Schema<T>;
}

type ObjectSchema<T> = FieldSchema & {
    readonly [K in keyof T]: Schema<T[K]>;
}

export type Schema<T> =
    T extends string ? FieldSchema :
    T extends number ? FieldSchema :
    T extends boolean ? FieldSchema :
    T extends File ? FieldSchema :
    T extends Blob ? FieldSchema :
    T extends Array<infer U> ? ArraySchema<U> :
    T extends Dictionary<infer U> ? DictionarySchema<U> :
    T extends Object ? ObjectSchema<T> :
    FieldSchema
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/getFormData.ts): ./test/result/v2/typescript/core/getFormData.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get FormData from object. This method is needed to upload
 * multipart form data to the REST API.
 * @param params Key value based object.
 */
export function getFormData(params: { [key: string]: any }): FormData {
    const formData = new FormData();
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value: any = params[key];
            if (value !== undefined && value !== null) {
                formData.append(key, value);
            }
        }
    }
    return formData;
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/getQueryString.ts): ./test/result/v2/typescript/core/getQueryString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get query string from query parameters object. This method also
 * supports multi-value items by creating a key for each item.
 * @param params Key value based object.
 */
export function getQueryString(params: { [key: string]: any }): string {
    const qs: string[] = [];
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value: any = params[key];
            if (value !== undefined && value !== null) {
                if (Array.isArray(value)) {
                    value.forEach(value => {
                        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                    });
                } else {
                    qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                }
            }
        }
    }
    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }
    return '';
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/isSuccess.ts): ./test/result/v2/typescript/core/isSuccess.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Check success response code.
 * @param status Status code
 */
export function isSuccess(status: number): boolean {
    return status >= 200 && status < 300;
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/request.ts): ./test/result/v2/typescript/core/request.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import {getFormData} from './getFormData';
import {getQueryString} from './getQueryString';
import {OpenAPI} from './OpenAPI';
import {RequestOptions} from './RequestOptions';
import {requestUsingFetch} from './requestUsingFetch';
import {requestUsingXHR} from './requestUsingXHR';
import {Result} from './Result';

/**
 * Create the request.
 * @param options Request method options.
 * @returns Result object (see above)
 */
export async function request(options: Readonly<RequestOptions>): Promise<Result> {

    // Create the request URL
    let url = \`\${OpenAPI.BASE}\${options.path}\`;

    // Create request headers
    const headers = new Headers({
        ...options.headers,
        Accept: 'application/json'
    });

    // Create request settings
    const request: RequestInit = {
        headers,
        method: options.method,
        credentials: 'same-origin'
    };

    // If we have a bearer token then we set the authentication header.
    if (OpenAPI.TOKEN !== null && OpenAPI.TOKEN !== '') {
        headers.append('Authorization', \`Bearer \${OpenAPI.TOKEN}\`);
    }

    // Add the query parameters (if defined).
    if (options.query) {
        url += getQueryString(options.query);
    }

    // Append formData as body
    if (options.formData) {
        request.body = getFormData(options.formData);
    } else if (options.body) {

        // If this is blob data, then pass it directly to the body and set content type.
        // Otherwise we just convert request data to JSON string (needed for fetch api)
        if (options.body instanceof Blob) {
            request.body = options.body;
            if (options.body.type) {
                headers.append('Content-Type', options.body.type);
            }
        } else {
            request.body = JSON.stringify(options.body);
            headers.append('Content-Type', 'application/json');
        }
    }

    try {
        switch (OpenAPI.CLIENT) {
            case 'xhr':
                return await requestUsingXHR(url, request);
            default:
                return await requestUsingFetch(url, request);
        }
    } catch (error) {
        return {
            url,
            ok: false,
            status: 0,
            statusText: '',
            body: error
        };
    }
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/requestUsingFetch.ts): ./test/result/v2/typescript/core/requestUsingFetch.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Result } from './Result';

/**
 * Request content using the new Fetch API. This is the default API that is used and
 * is create for all JSON, XML and text objects. However it is limited to UTF-8.
 * This is a problem for some of the Docs content, since that requires UTF-16!
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingFetch(url: string, request: Readonly<RequestInit>): Promise<Result> {

    // Fetch response using fetch API.
    const response = await fetch(url, request);

    // Create result object.
    const result: Result = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: null
    };

    // Try to parse the content for any response status code.
    // We check the \\"Content-Type\\" header to see if we need to parse the
    // content as json or as plain text.
    const contentType = response.headers.get('Content-Type');
    if (contentType) {
        switch (contentType.toLowerCase()) {
            case 'application/json':
            case 'application/json; charset=utf-8':
                result.body = await response.json();
                break;

            case 'text/plain':
            case 'text/xml':
            case 'text/xml; charset=utf-8':
            case 'text/xml; charset=utf-16':
                result.body = await response.text();
                break;
        }
    }

    return result;
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/core/requestUsingXHR.ts): ./test/result/v2/typescript/core/requestUsingXHR.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Result } from './Result';
import { isSuccess } from './isSuccess';

/**
 * Request content using the new legacy XMLHttpRequest API. This method is useful
 * when we want to request UTF-16 content, since it natively supports loading UTF-16.
 * We could do the same with the Fetch API, but then we will need to convert the
 * content using JavaScript... And that is very very slow.
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingXHR(url: string, request: Readonly<RequestInit>): Promise<Result> {
    return new Promise(resolve => {
        const xhr = new XMLHttpRequest();

        // Open the request, remember to do this before adding any headers,
        // because the request needs to be initialized!
        xhr.open(request.method!, url, true);

        // Add the headers (required when dealing with JSON)
        const headers = request.headers as Headers;
        headers.forEach((value: string, key: string): void => {
            xhr.setRequestHeader(key, value);
        });

        // Register the readystate handler, this will fire when the request is done.
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {

                // Create result object.
                const result: Result = {
                    url,
                    ok: isSuccess(xhr.status),
                    status: xhr.status,
                    statusText: xhr.statusText,
                    body: null
                };

                // Try to parse the content for any response status code.
                // We check the \\"Content-Type\\" header to see if we need to parse the
                // content as json or as plain text.
                const contentType = xhr.getResponseHeader('Content-Type');
                if (contentType) {
                    switch (contentType.toLowerCase()) {
                        case 'application/json':
                        case 'application/json; charset=utf-8':
                            result.body = JSON.parse(xhr.responseText);
                            break;

                        case 'text/plain':
                        case 'text/xml':
                        case 'text/xml; charset=utf-8':
                        case 'text/xml; charset=utf-16':
                            result.body = xhr.responseText;
                            break;
                    }
                }

                // Done!
                resolve(result);
            }
        };

        // Start the request!
        xhr.send(request.body);
    });
}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/index.ts): ./test/result/v2/typescript/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export { ApiError } from './core/ApiError';
export { isSuccess } from './core/isSuccess';
export { OpenAPI } from './core/OpenAPI';
import { Schema } from './core/Schema';

import { ArrayWithArray } from './models/ArrayWithArray';
import { ArrayWithBooleans } from './models/ArrayWithBooleans';
import { ArrayWithNumbers } from './models/ArrayWithNumbers';
import { ArrayWithProperties } from './models/ArrayWithProperties';
import { ArrayWithReferences } from './models/ArrayWithReferences';
import { ArrayWithStrings } from './models/ArrayWithStrings';
import { Dictionary } from './models/Dictionary';
import { DictionaryWithArray } from './models/DictionaryWithArray';
import { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
import { DictionaryWithProperties } from './models/DictionaryWithProperties';
import { DictionaryWithReference } from './models/DictionaryWithReference';
import { DictionaryWithString } from './models/DictionaryWithString';
import { EnumFromDescription } from './models/EnumFromDescription';
import { EnumWithNumbers } from './models/EnumWithNumbers';
import { EnumWithStrings } from './models/EnumWithStrings';
import { ModelLink } from './models/ModelLink';
import { ModelThatExtends } from './models/ModelThatExtends';
import { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
import { ModelWithArray } from './models/ModelWithArray';
import { ModelWithBoolean } from './models/ModelWithBoolean';
import { ModelWithCircularReference } from './models/ModelWithCircularReference';
import { ModelWithDictionary } from './models/ModelWithDictionary';
import { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
import { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
import { ModelWithEnum } from './models/ModelWithEnum';
import { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
import { ModelWithInteger } from './models/ModelWithInteger';
import { ModelWithLink } from './models/ModelWithLink';
import { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
import { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
import { ModelWithProperties } from './models/ModelWithProperties';
import { ModelWithReference } from './models/ModelWithReference';
import { ModelWithString } from './models/ModelWithString';
import { SimpleBoolean } from './models/SimpleBoolean';
import { SimpleFile } from './models/SimpleFile';
import { SimpleInteger } from './models/SimpleInteger';
import { SimpleReference } from './models/SimpleReference';
import { SimpleString } from './models/SimpleString';

export { ArrayWithArray };
export { ArrayWithBooleans };
export { ArrayWithNumbers };
export { ArrayWithProperties };
export { ArrayWithReferences };
export { ArrayWithStrings };
export { Dictionary };
export { DictionaryWithArray };
export { DictionaryWithDictionary };
export { DictionaryWithProperties };
export { DictionaryWithReference };
export { DictionaryWithString };
export { EnumFromDescription };
export { EnumWithNumbers };
export { EnumWithStrings };
export { ModelLink };
export { ModelThatExtends };
export { ModelThatExtendsExtends };
export { ModelWithArray };
export { ModelWithBoolean };
export { ModelWithCircularReference };
export { ModelWithDictionary };
export { ModelWithDuplicateImports };
export { ModelWithDuplicateProperties };
export { ModelWithEnum };
export { ModelWithEnumFromDescription };
export { ModelWithInteger };
export { ModelWithLink };
export { ModelWithNestedEnums };
export { ModelWithNestedProperties };
export { ModelWithProperties };
export { ModelWithReference };
export { ModelWithString };
export { SimpleBoolean };
export { SimpleFile };
export { SimpleInteger };
export { SimpleReference };
export { SimpleString };

export { ComplexService } from './services/ComplexService';
export { DefaultsService } from './services/DefaultsService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';

const schemas = {
    'ArrayWithArray': ArrayWithArray.schema,
    'ArrayWithBooleans': ArrayWithBooleans.schema,
    'ArrayWithNumbers': ArrayWithNumbers.schema,
    'ArrayWithProperties': ArrayWithProperties.schema,
    'ArrayWithReferences': ArrayWithReferences.schema,
    'ArrayWithStrings': ArrayWithStrings.schema,
    'Dictionary': Dictionary.schema,
    'DictionaryWithArray': DictionaryWithArray.schema,
    'DictionaryWithDictionary': DictionaryWithDictionary.schema,
    'DictionaryWithProperties': DictionaryWithProperties.schema,
    'DictionaryWithReference': DictionaryWithReference.schema,
    'DictionaryWithString': DictionaryWithString.schema,
    'EnumFromDescription': EnumFromDescription.schema,
    'EnumWithNumbers': EnumWithNumbers.schema,
    'EnumWithStrings': EnumWithStrings.schema,
    'ModelLink': ModelLink.schema,
    'ModelThatExtends': ModelThatExtends.schema,
    'ModelThatExtendsExtends': ModelThatExtendsExtends.schema,
    'ModelWithArray': ModelWithArray.schema,
    'ModelWithBoolean': ModelWithBoolean.schema,
    'ModelWithCircularReference': ModelWithCircularReference.schema,
    'ModelWithDictionary': ModelWithDictionary.schema,
    'ModelWithDuplicateImports': ModelWithDuplicateImports.schema,
    'ModelWithDuplicateProperties': ModelWithDuplicateProperties.schema,
    'ModelWithEnum': ModelWithEnum.schema,
    'ModelWithEnumFromDescription': ModelWithEnumFromDescription.schema,
    'ModelWithInteger': ModelWithInteger.schema,
    'ModelWithLink': ModelWithLink.schema,
    'ModelWithNestedEnums': ModelWithNestedEnums.schema,
    'ModelWithNestedProperties': ModelWithNestedProperties.schema,
    'ModelWithProperties': ModelWithProperties.schema,
    'ModelWithReference': ModelWithReference.schema,
    'ModelWithString': ModelWithString.schema,
    'SimpleBoolean': SimpleBoolean.schema,
    'SimpleFile': SimpleFile.schema,
    'SimpleInteger': SimpleInteger.schema,
    'SimpleReference': SimpleReference.schema,
    'SimpleString': SimpleString.schema,
};

export function getSchema<K extends keyof typeof schemas>(schema: K) {
    if (schemas.hasOwnProperty(schema)) {
        return schemas[schema];
    }
    return null;
}

"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithArray.ts): ./test/result/v2/typescript/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

export namespace ArrayWithArray {

    export const schema: Schema<ArrayWithArray> = {
        type: 'Array',
        item: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithBooleans.ts): ./test/result/v2/typescript/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;

export namespace ArrayWithBooleans {

    export const schema: Schema<ArrayWithBooleans> = {
        type: 'Array',
        item: {
            type: 'boolean',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithNumbers.ts): ./test/result/v2/typescript/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;

export namespace ArrayWithNumbers {

    export const schema: Schema<ArrayWithNumbers> = {
        type: 'Array',
        item: {
            type: 'number',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithProperties.ts): ./test/result/v2/typescript/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string,
    bar?: string,
}>;

export namespace ArrayWithProperties {

    export const schema: Schema<ArrayWithProperties> = {
        type: 'Array',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithReferences.ts): ./test/result/v2/typescript/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

export namespace ArrayWithReferences {

    export const schema: Schema<ArrayWithReferences> = {
        type: 'Array',
        item: {
            type: 'ModelWithString',
        }
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ArrayWithStrings.ts): ./test/result/v2/typescript/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;

export namespace ArrayWithStrings {

    export const schema: Schema<ArrayWithStrings> = {
        type: 'Array',
        item: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/Dictionary.ts): ./test/result/v2/typescript/models/Dictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

export interface Dictionary<T> {

    /**
     * @internal
     */
    readonly __type: T,

    [key: string]: T;
}

export namespace Dictionary {

    export const schema: Schema<Dictionary<any>> = {
        type: 'Dictionary',
        item: {
            type: 'any'
        }
    };

}
"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/DictionaryWithArray.ts): ./test/result/v2/typescript/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Dictionary<Array<ModelWithString>>;

export namespace DictionaryWithArray {

    export const schema: Schema<DictionaryWithArray> = {
        type: 'Dictionary',
        item: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/DictionaryWithDictionary.ts): ./test/result/v2/typescript/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Dictionary<Dictionary<string>>;

export namespace DictionaryWithDictionary {

    export const schema: Schema<DictionaryWithDictionary> = {
        type: 'Dictionary',
        item: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/DictionaryWithProperties.ts): ./test/result/v2/typescript/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Dictionary<{
    foo?: string,
    bar?: string,
}>;

export namespace DictionaryWithProperties {

    export const schema: Schema<DictionaryWithProperties> = {
        type: 'Dictionary',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/DictionaryWithReference.ts): ./test/result/v2/typescript/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Dictionary<ModelWithString>;

export namespace DictionaryWithReference {

    export const schema: Schema<DictionaryWithReference> = {
        type: 'Dictionary',
        item: {
            type: 'ModelWithString',
        }
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/DictionaryWithString.ts): ./test/result/v2/typescript/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Dictionary<string>;

export namespace DictionaryWithString {

    export const schema: Schema<DictionaryWithString> = {
        type: 'Dictionary',
        item: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/EnumFromDescription.ts): ./test/result/v2/typescript/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * Success=1,Warning=2,Error=3
 */
export enum EnumFromDescription {
    ERROR = 3,
    SUCCESS = 1,
    WARNING = 2,
}

export namespace EnumFromDescription {

    export const schema: Schema<EnumFromDescription> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/EnumWithNumbers.ts): ./test/result/v2/typescript/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    NUM_1 = 1,
    NUM_2 = 2,
    NUM_3 = 3,
}

export namespace EnumWithNumbers {

    export const schema: Schema<EnumWithNumbers> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/EnumWithStrings.ts): ./test/result/v2/typescript/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning',
}

export namespace EnumWithStrings {

    export const schema: Schema<EnumWithStrings> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelLink.ts): ./test/result/v2/typescript/models/ModelLink.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model that can have a template??
 */
export interface ModelLink {
    id?: string;
}

export namespace ModelLink {

    export const schema: Schema<ModelLink> = {
        id: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelThatExtends.ts): ./test/result/v2/typescript/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that extends another model
 */
export interface ModelThatExtends extends ModelWithString {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
}

export namespace ModelThatExtends {

    export const schema: Schema<ModelThatExtends> = {
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelThatExtendsExtends.ts): ./test/result/v2/typescript/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that extends another model
 */
export interface ModelThatExtendsExtends extends ModelWithString, ModelThatExtends {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
}

export namespace ModelThatExtendsExtends {

    export const schema: Schema<ModelThatExtendsExtends> = {
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithArray.ts): ./test/result/v2/typescript/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one property containing an array
 */
export interface ModelWithArray {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<File>;
    propWithNumber?: Array<number>;
}

export namespace ModelWithArray {

    export const schema: Schema<ModelWithArray> = {
        prop: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
        propWithFile: {
            type: 'Array',
            item: {
                type: 'File',
            },
        },
        propWithNumber: {
            type: 'Array',
            item: {
                type: 'number',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithBoolean.ts): ./test/result/v2/typescript/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one boolean property
 */
export interface ModelWithBoolean {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
}

export namespace ModelWithBoolean {

    export const schema: Schema<ModelWithBoolean> = {
        prop: {
            type: 'boolean',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithCircularReference.ts): ./test/result/v2/typescript/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one property containing a circular reference
 */
export interface ModelWithCircularReference {
    prop?: ModelWithCircularReference;
}

export namespace ModelWithCircularReference {

    export const schema: Schema<ModelWithCircularReference> = {
        prop: {
            type: 'ModelWithCircularReference',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithDictionary.ts): ./test/result/v2/typescript/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a model with one property containing a dictionary
 */
export interface ModelWithDictionary {
    prop?: Dictionary<string>;
}

export namespace ModelWithDictionary {

    export const schema: Schema<ModelWithDictionary> = {
        prop: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithDuplicateImports.ts): ./test/result/v2/typescript/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with duplicated imports
 */
export interface ModelWithDuplicateImports {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
}

export namespace ModelWithDuplicateImports {

    export const schema: Schema<ModelWithDuplicateImports> = {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithDuplicateProperties.ts): ./test/result/v2/typescript/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with duplicated properties
 */
export interface ModelWithDuplicateProperties {
    prop?: ModelWithString;
}

export namespace ModelWithDuplicateProperties {

    export const schema: Schema<ModelWithDuplicateProperties> = {
        prop: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithEnum.ts): ./test/result/v2/typescript/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one enum
 */
export interface ModelWithEnum {
    /**
     * This is a simple enum with strings
     */
    test?: ModelWithEnum.test;
}

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    export const schema: Schema<ModelWithEnum> = {
        test: {
            type: 'Enum',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithEnumFromDescription.ts): ./test/result/v2/typescript/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one enum
 */
export interface ModelWithEnumFromDescription {
    /**
     * Success=1,Warning=2,Error=3
     */
    test?: ModelWithEnumFromDescription.test;
}

export namespace ModelWithEnumFromDescription {

    /**
     * Success=1,Warning=2,Error=3
     */
    export enum test {
        SUCCESS = 1,
        WARNING = 2,
        ERROR = 3,
    }

    export const schema: Schema<ModelWithEnumFromDescription> = {
        test: {
            type: 'Enum',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithInteger.ts): ./test/result/v2/typescript/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one number property
 */
export interface ModelWithInteger {
    /**
     * This is a simple number property
     */
    prop?: number;
}

export namespace ModelWithInteger {

    export const schema: Schema<ModelWithInteger> = {
        prop: {
            type: 'number',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithLink.ts): ./test/result/v2/typescript/models/ModelWithLink.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelLink } from '../models/ModelLink';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that can have a template??
 */
export interface ModelWithLink {
    prop?: ModelLink;
}

export namespace ModelWithLink {

    export const schema: Schema<ModelWithLink> = {
        prop: {
            type: 'ModelLink',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithNestedEnums.ts): ./test/result/v2/typescript/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a model with nested enums
 */
export interface ModelWithNestedEnums {
    arrayWithDescription?: Array<(1 | 2 | 3)>;
    arrayWithEnum?: Array<('Success' | 'Warning' | 'Error')>;
    dictionaryWithEnum?: Dictionary<('Success' | 'Warning' | 'Error')>;
    dictionaryWithEnumFromDescription?: Dictionary<(1 | 2 | 3)>;
}

export namespace ModelWithNestedEnums {

    export const schema: Schema<ModelWithNestedEnums> = {
        arrayWithDescription: {
            type: 'Array',
            item: {
                type: 'Enum',
            },
        },
        arrayWithEnum: {
            type: 'Array',
            item: {
                type: 'Enum',
            },
        },
        dictionaryWithEnum: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
            },
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithNestedProperties.ts): ./test/result/v2/typescript/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one nested property
 */
export interface ModelWithNestedProperties {
    readonly first: {
        readonly second: {
            readonly third: string,
        },
    };
}

export namespace ModelWithNestedProperties {

    export const schema: Schema<ModelWithNestedProperties> = {
        first: {
            second: {
                third: {
                    type: 'string',
                    isReadOnly: true,
                    isRequired: true,
                },
                isReadOnly: true,
                isRequired: true,
            },
            isReadOnly: true,
            isRequired: true,
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithProperties.ts): ./test/result/v2/typescript/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one nested property
 */
export interface ModelWithProperties {
    boolean?: boolean;
    number?: number;
    reference?: ModelWithString;
    required: string;
    readonly requiredAndReadOnly: string;
    string?: string;
}

export namespace ModelWithProperties {

    export const schema: Schema<ModelWithProperties> = {
        boolean: {
            type: 'boolean',
        },
        number: {
            type: 'number',
        },
        reference: {
            type: 'ModelWithString',
        },
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithReference.ts): ./test/result/v2/typescript/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one property containing a reference
 */
export interface ModelWithReference {
    prop?: ModelWithString;
}

export namespace ModelWithReference {

    export const schema: Schema<ModelWithReference> = {
        prop: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/ModelWithString.ts): ./test/result/v2/typescript/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one string property
 */
export interface ModelWithString {
    /**
     * This is a simple string property
     */
    prop?: string;
}

export namespace ModelWithString {

    export const schema: Schema<ModelWithString> = {
        prop: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/SimpleBoolean.ts): ./test/result/v2/typescript/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

export namespace SimpleBoolean {

    export const schema: Schema<SimpleBoolean> = {
        type: 'boolean',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/SimpleFile.ts): ./test/result/v2/typescript/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple file
 */
export type SimpleFile = File;

export namespace SimpleFile {

    export const schema: Schema<SimpleFile> = {
        type: 'File',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/SimpleInteger.ts): ./test/result/v2/typescript/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple number
 */
export type SimpleInteger = number;

export namespace SimpleInteger {

    export const schema: Schema<SimpleInteger> = {
        type: 'number',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/SimpleReference.ts): ./test/result/v2/typescript/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

export namespace SimpleReference {

    export const schema: Schema<SimpleReference> = {
        type: 'ModelWithString',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/models/SimpleString.ts): ./test/result/v2/typescript/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple string
 */
export type SimpleString = string;

export namespace SimpleString {

    export const schema: Schema<SimpleString> = {
        type: 'string',
    };

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/ComplexService.ts): ./test/result/v2/typescript/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ComplexService {

    /**
     * @param parameterObject Parameter containing object
     * @param parameterReference Parameter containing reference
     * @result ModelWithString Successful response
     * @throws ApiError
     */
    public static async complexTypes(
        parameterObject: {
            first?: {
                second?: {
                    third?: string,
                },
            },
        },
        parameterReference: ModelWithString,
    ): Promise<Array<ModelWithString>> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/complex\`,
            query: {
                'parameterObject': parameterObject,
                'parameterReference': parameterReference,
            },
        });

        if (!result.ok) {
            switch (result.status) {
                case 400: throw new ApiError(result, \`400 server error\`);
                case 500: throw new ApiError(result, \`500 server error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/DefaultsService.ts): ./test/result/v2/typescript/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string
     * @param parameterNumber This is a simple number
     * @param parameterBoolean This is a simple boolean
     * @param parameterEnum This is a simple enum
     * @param parameterModel This is a simple model
     * @throws ApiError
     */
    public static async callWithDefaultParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: ('Success' | 'Warning' | 'Error') = 'Success',
        parameterModel: ModelWithString = {
            \\"prop\\": \\"Hello World\\"
        },
    ): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/defaults\`,
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/ParametersService.ts): ./test/result/v2/typescript/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterBody This is the parameter that is send as request body
     * @throws ApiError
     */
    public static async callWithParameters(
        parameterHeader: string,
        parameterQuery: string,
        parameterForm: string,
        parameterBody: string,
    ): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/parameters\`,
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: parameterBody,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/ResponseService.ts): ./test/result/v2/typescript/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ResponseService {

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    public static async callWithDuplicateResponses(): Promise<ModelWithString> {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    public static async callWithResponse(): Promise<ModelWithString> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @result ModelThatExtends Message for 201 response
     * @result ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static async callWithResponses(): Promise<ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/SimpleService.ts): ./test/result/v2/typescript/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class SimpleService {

    /**
     * @throws ApiError
     */
    public static async deleteCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'delete',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async getCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async headCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'head',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async optionsCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'options',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async patchCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'patch',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async postCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async putCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v2 typescript file(./test/result/v2/typescript/services/TypesService.ts): ./test/result/v2/typescript/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Dictionary } from '../models/Dictionary';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class TypesService {

    /**
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param id This is a number parameter
     * @result number Response is a simple number
     * @result string Response is a simple string
     * @result boolean Response is a simple boolean
     * @result any Response is a simple object
     * @throws ApiError
     */
    public static async types(
        parameterNumber: number = 123,
        parameterString: string = 'default',
        parameterBoolean: boolean = true,
        parameterObject: any = null,
        parameterArray: Array<string>,
        parameterDictionary: Dictionary<string>,
        parameterEnum: ('Success' | 'Warning' | 'Error'),
        id?: number,
    ): Promise<number | string | boolean | any> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/types\`,
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/ApiError.js): ./test/result/v3/javascript/core/ApiError.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from \\"./isSuccess\\";

export class ApiError extends Error {

    constructor(result, message) {
        super(message);

        this.url = result.url;
        this.status = result.status;
        this.statusText = result.statusText;
        this.body = result.body;
    }
}

(function (ApiError) {
    let Message;
    (function (Message) {
        Message.BAD_REQUEST = 'Bad Request';
        Message.UNAUTHORIZED = 'Unauthorized';
        Message.FORBIDDEN = 'Forbidden';
        Message.NOT_FOUND = 'Not Found';
        Message.INTERNAL_SERVER_ERROR = 'Internal Server Error';
        Message.BAD_GATEWAY = 'Bad Gateway';
        Message.SERVICE_UNAVAILABLE = 'Service Unavailable';
        Message.GENERIC_ERROR = 'Generic Error';
    })(Message = ApiError.Message || (ApiError.Message = {}));
})(ApiError || (ApiError = {}));

/**
 * Catch common errors (based on status code).
 * @param result
 */
export function catchGenericError(result) {

    switch (result.status) {
        case 400: throw new ApiError(result, ApiError.Message.BAD_REQUEST);
        case 401: throw new ApiError(result, ApiError.Message.UNAUTHORIZED);
        case 403: throw new ApiError(result, ApiError.Message.FORBIDDEN);
        case 404: throw new ApiError(result, ApiError.Message.NOT_FOUND);
        case 500: throw new ApiError(result, ApiError.Message.INTERNAL_SERVER_ERROR);
        case 502: throw new ApiError(result, ApiError.Message.BAD_GATEWAY);
        case 503: throw new ApiError(result, ApiError.Message.SERVICE_UNAVAILABLE);
    }

    if (!isSuccess(result.status)) {
        throw new ApiError(result, ApiError.Message.GENERIC_ERROR);
    }
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/OpenAPI.js): ./test/result/v3/javascript/core/OpenAPI.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export let OpenAPI;
(function (OpenAPI) {
    OpenAPI.BASE = '/api';
    OpenAPI.VERSION = '1';
    OpenAPI.CLIENT = 'xhr';
    OpenAPI.TOKEN = '';
})(OpenAPI || (OpenAPI = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/getFormData.js): ./test/result/v3/javascript/core/getFormData.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get FormData from object. This method is needed to upload
 * multipart form data to the REST API.
 * @param params Key value based object.
 */
export function getFormData(params) {
    const formData = new FormData();
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value = params[key];
            if (value !== undefined && value !== null) {
                formData.append(key, value);
            }
        }
    }
    return formData;
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/getQueryString.js): ./test/result/v3/javascript/core/getQueryString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get query string from query parameters object. This method also
 * supports multi-value items by creating a key for each item.
 * @param params Key value based object.
 */
export function getQueryString(params) {
    const qs = [];
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value = params[key];
            if (value !== undefined && value !== null) {
                if (Array.isArray(value)) {
                    value.forEach(value => {
                        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                    });
                } else {
                    qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                }
            }
        }
    }
    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }
    return '';
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/isSuccess.js): ./test/result/v3/javascript/core/isSuccess.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Check success response code.
 * @param status Status code
 */
export function isSuccess(status) {
    return status >= 200 && status < 300;
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/request.js): ./test/result/v3/javascript/core/request.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import {getFormData} from './getFormData';
import {getQueryString} from './getQueryString';
import {OpenAPI} from './OpenAPI';
import {requestUsingFetch} from './requestUsingFetch';
import {requestUsingXHR} from './requestUsingXHR';

/**
 * Create the request.
 * @param options Request method options.
 * @returns Result object (see above)
 */
export async function request(options) {

    // Create the request URL
    let url = \`\${OpenAPI.BASE}\${options.path}\`;

    // Create request headers
    const headers = new Headers({
        ...options.headers,
        Accept: 'application/json'
    });

    // Create request settings
    const request = {
        headers,
        method: options.method,
        credentials: 'same-origin'
    };

    // If we have a bearer token then we set the authentication header.
    if (OpenAPI.TOKEN !== null && OpenAPI.TOKEN !== '') {
        headers.append('Authorization', \`Bearer \${OpenAPI.TOKEN}\`);
    }

    // Add the query parameters (if defined).
    if (options.query) {
        url += getQueryString(options.query);
    }

    // Append formData as body
    if (options.formData) {
        request.body = getFormData(options.formData);
    } else if (options.body) {

        // If this is blob data, then pass it directly to the body and set content type.
        // Otherwise we just convert request data to JSON string (needed for fetch api)
        if (options.body instanceof Blob) {
            request.body = options.body;
            if (options.body.type) {
                headers.append('Content-Type', options.body.type);
            }
        } else {
            request.body = JSON.stringify(options.body);
            headers.append('Content-Type', 'application/json');
        }
    }

    try {
        switch (OpenAPI.CLIENT) {
            case 'xhr':
                return await requestUsingXHR(url, request);
            default:
                return await requestUsingFetch(url, request);
        }
    } catch (error) {
        return {
            url,
            ok: false,
            status: 0,
            statusText: '',
            body: error
        };
    }
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/requestUsingFetch.js): ./test/result/v3/javascript/core/requestUsingFetch.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Request content using the new Fetch API. This is the default API that is used and
 * is create for all JSON, XML and text objects. However it is limited to UTF-8.
 * This is a problem for some of the Docs content, since that requires UTF-16!
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingFetch(url, request) {

    // Fetch response using fetch API.
    const response = await fetch(url, request);

    // Create result object.
    const result = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: null
    };

    // Try to parse the content for any response status code.
    // We check the \\"Content-Type\\" header to see if we need to parse the
    // content as json or as plain text.
    const contentType = response.headers.get('Content-Type');
    if (contentType) {
        switch (contentType.toLowerCase()) {
            case 'application/json':
            case 'application/json; charset=utf-8':
                result.body = await response.json();
                break;

            case 'text/plain':
            case 'text/xml':
            case 'text/xml; charset=utf-8':
            case 'text/xml; charset=utf-16':
                result.body = await response.text();
                break;
        }
    }

    return result;
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/core/requestUsingXHR.js): ./test/result/v3/javascript/core/requestUsingXHR.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from './isSuccess';

/**
 * Request content using the new legacy XMLHttpRequest API. This method is useful
 * when we want to request UTF-16 content, since it natively supports loading UTF-16.
 * We could do the same with the Fetch API, but then we will need to convert the
 * content using JavaScript... And that is very very slow.
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingXHR(url, request) {
    return new Promise(resolve => {
        const xhr = new XMLHttpRequest();

        // Open the request, remember to do this before adding any headers,
        // because the request needs to be initialized!
        xhr.open(request.method, url, true);

        // Add the headers (required when dealing with JSON)
        const headers = request.headers as Headers;
        headers.forEach((value, key) => {
            xhr.setRequestHeader(key, value);
        });

        // Register the readystate handler, this will fire when the request is done.
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {

                // Create result object.
                const result = {
                    url,
                    ok: isSuccess(xhr.status),
                    status: xhr.status,
                    statusText: xhr.statusText,
                    body: null
                };

                // Try to parse the content for any response status code.
                // We check the \\"Content-Type\\" header to see if we need to parse the
                // content as json or as plain text.
                const contentType = xhr.getResponseHeader('Content-Type');
                if (contentType) {
                    switch (contentType.toLowerCase()) {
                        case 'application/json':
                        case 'application/json; charset=utf-8':
                            result.body = JSON.parse(xhr.responseText);
                            break;

                        case 'text/plain':
                        case 'text/xml':
                        case 'text/xml; charset=utf-8':
                        case 'text/xml; charset=utf-16':
                            result.body = xhr.responseText;
                            break;
                    }
                }

                // Done!
                resolve(result);
            }
        };

        // Start the request!
        xhr.send(request.body);
    });
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/index.js): ./test/result/v3/javascript/index.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export { ApiError } from './core/ApiError';
export { isSuccess } from './core/isSuccess';
export { OpenAPI } from './core/OpenAPI';

import { ArrayWithArray } from './models/ArrayWithArray';
import { ArrayWithBooleans } from './models/ArrayWithBooleans';
import { ArrayWithNumbers } from './models/ArrayWithNumbers';
import { ArrayWithProperties } from './models/ArrayWithProperties';
import { ArrayWithReferences } from './models/ArrayWithReferences';
import { ArrayWithStrings } from './models/ArrayWithStrings';
import { Dictionary } from './models/Dictionary';
import { DictionaryWithArray } from './models/DictionaryWithArray';
import { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
import { DictionaryWithProperties } from './models/DictionaryWithProperties';
import { DictionaryWithReference } from './models/DictionaryWithReference';
import { DictionaryWithString } from './models/DictionaryWithString';
import { EnumFromDescription } from './models/EnumFromDescription';
import { EnumWithNumbers } from './models/EnumWithNumbers';
import { EnumWithStrings } from './models/EnumWithStrings';
import { ModelLink } from './models/ModelLink';
import { ModelThatExtends } from './models/ModelThatExtends';
import { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
import { ModelWithArray } from './models/ModelWithArray';
import { ModelWithBoolean } from './models/ModelWithBoolean';
import { ModelWithCircularReference } from './models/ModelWithCircularReference';
import { ModelWithDictionary } from './models/ModelWithDictionary';
import { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
import { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
import { ModelWithEnum } from './models/ModelWithEnum';
import { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
import { ModelWithInteger } from './models/ModelWithInteger';
import { ModelWithLink } from './models/ModelWithLink';
import { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
import { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
import { ModelWithProperties } from './models/ModelWithProperties';
import { ModelWithReference } from './models/ModelWithReference';
import { ModelWithString } from './models/ModelWithString';
import { SimpleBoolean } from './models/SimpleBoolean';
import { SimpleFile } from './models/SimpleFile';
import { SimpleInteger } from './models/SimpleInteger';
import { SimpleReference } from './models/SimpleReference';
import { SimpleString } from './models/SimpleString';

export { ArrayWithArray };
export { ArrayWithBooleans };
export { ArrayWithNumbers };
export { ArrayWithProperties };
export { ArrayWithReferences };
export { ArrayWithStrings };
export { Dictionary };
export { DictionaryWithArray };
export { DictionaryWithDictionary };
export { DictionaryWithProperties };
export { DictionaryWithReference };
export { DictionaryWithString };
export { EnumFromDescription };
export { EnumWithNumbers };
export { EnumWithStrings };
export { ModelLink };
export { ModelThatExtends };
export { ModelThatExtendsExtends };
export { ModelWithArray };
export { ModelWithBoolean };
export { ModelWithCircularReference };
export { ModelWithDictionary };
export { ModelWithDuplicateImports };
export { ModelWithDuplicateProperties };
export { ModelWithEnum };
export { ModelWithEnumFromDescription };
export { ModelWithInteger };
export { ModelWithLink };
export { ModelWithNestedEnums };
export { ModelWithNestedProperties };
export { ModelWithProperties };
export { ModelWithReference };
export { ModelWithString };
export { SimpleBoolean };
export { SimpleFile };
export { SimpleInteger };
export { SimpleReference };
export { SimpleString };

export { ComplexService } from './services/ComplexService';
export { DefaultsService } from './services/DefaultsService';
export { MultipartService } from './services/MultipartService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';

const schemas = {
    'ArrayWithArray': ArrayWithArray.schema,
    'ArrayWithBooleans': ArrayWithBooleans.schema,
    'ArrayWithNumbers': ArrayWithNumbers.schema,
    'ArrayWithProperties': ArrayWithProperties.schema,
    'ArrayWithReferences': ArrayWithReferences.schema,
    'ArrayWithStrings': ArrayWithStrings.schema,
    'Dictionary': Dictionary.schema,
    'DictionaryWithArray': DictionaryWithArray.schema,
    'DictionaryWithDictionary': DictionaryWithDictionary.schema,
    'DictionaryWithProperties': DictionaryWithProperties.schema,
    'DictionaryWithReference': DictionaryWithReference.schema,
    'DictionaryWithString': DictionaryWithString.schema,
    'EnumFromDescription': EnumFromDescription.schema,
    'EnumWithNumbers': EnumWithNumbers.schema,
    'EnumWithStrings': EnumWithStrings.schema,
    'ModelLink': ModelLink.schema,
    'ModelThatExtends': ModelThatExtends.schema,
    'ModelThatExtendsExtends': ModelThatExtendsExtends.schema,
    'ModelWithArray': ModelWithArray.schema,
    'ModelWithBoolean': ModelWithBoolean.schema,
    'ModelWithCircularReference': ModelWithCircularReference.schema,
    'ModelWithDictionary': ModelWithDictionary.schema,
    'ModelWithDuplicateImports': ModelWithDuplicateImports.schema,
    'ModelWithDuplicateProperties': ModelWithDuplicateProperties.schema,
    'ModelWithEnum': ModelWithEnum.schema,
    'ModelWithEnumFromDescription': ModelWithEnumFromDescription.schema,
    'ModelWithInteger': ModelWithInteger.schema,
    'ModelWithLink': ModelWithLink.schema,
    'ModelWithNestedEnums': ModelWithNestedEnums.schema,
    'ModelWithNestedProperties': ModelWithNestedProperties.schema,
    'ModelWithProperties': ModelWithProperties.schema,
    'ModelWithReference': ModelWithReference.schema,
    'ModelWithString': ModelWithString.schema,
    'SimpleBoolean': SimpleBoolean.schema,
    'SimpleFile': SimpleFile.schema,
    'SimpleInteger': SimpleInteger.schema,
    'SimpleReference': SimpleReference.schema,
    'SimpleString': SimpleString.schema,
};

export function getSchema(schema) {
    if (schemas.hasOwnProperty(schema)) {
        return schemas[schema];
    }
    return null;
}
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithArray.js): ./test/result/v3/javascript/models/ArrayWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array containing an array
 */
export let ArrayWithArray;
(function (ArrayWithArray) {

    ArrayWithArray.schema = {
        type: 'Array',
        item: {
            type: 'Array',
            item: 'ModelWithString',
        },
    };

})(ArrayWithArray || (ArrayWithArray = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithBooleans.js): ./test/result/v3/javascript/models/ArrayWithBooleans.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with booleans
 */
export let ArrayWithBooleans;
(function (ArrayWithBooleans) {

    ArrayWithBooleans.schema = {
        type: 'Array',
        item: {
            type: 'boolean',
        },
    };

})(ArrayWithBooleans || (ArrayWithBooleans = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithNumbers.js): ./test/result/v3/javascript/models/ArrayWithNumbers.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with numbers
 */
export let ArrayWithNumbers;
(function (ArrayWithNumbers) {

    ArrayWithNumbers.schema = {
        type: 'Array',
        item: {
            type: 'number',
        },
    };

})(ArrayWithNumbers || (ArrayWithNumbers = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithProperties.js): ./test/result/v3/javascript/models/ArrayWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with properties
 */
export let ArrayWithProperties;
(function (ArrayWithProperties) {

    ArrayWithProperties.schema = {
        type: 'Array',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

})(ArrayWithProperties || (ArrayWithProperties = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithReferences.js): ./test/result/v3/javascript/models/ArrayWithReferences.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with references
 */
export let ArrayWithReferences;
(function (ArrayWithReferences) {

    ArrayWithReferences.schema = {
        type: 'Array',
        item: 'ModelWithString',
    };

})(ArrayWithReferences || (ArrayWithReferences = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ArrayWithStrings.js): ./test/result/v3/javascript/models/ArrayWithStrings.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple array with strings
 */
export let ArrayWithStrings;
(function (ArrayWithStrings) {

    ArrayWithStrings.schema = {
        type: 'Array',
        item: {
            type: 'string',
        },
    };

})(ArrayWithStrings || (ArrayWithStrings = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/Dictionary.js): ./test/result/v3/javascript/models/Dictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

export let Dictionary;
(function (Dictionary) {

    Dictionary.schema = {
        type: 'Dictionary',
        item: {
            type: 'any'
        }
    };

})(Dictionary || (Dictionary = {}));
"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/DictionaryWithArray.js): ./test/result/v3/javascript/models/DictionaryWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a complex dictionary
 */
export let DictionaryWithArray;
(function (DictionaryWithArray) {

    DictionaryWithArray.schema = {
        type: 'Dictionary',
        item: {
            type: 'Array',
            item: 'ModelWithString',
        },
    };

})(DictionaryWithArray || (DictionaryWithArray = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/DictionaryWithDictionary.js): ./test/result/v3/javascript/models/DictionaryWithDictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string dictionary
 */
export let DictionaryWithDictionary;
(function (DictionaryWithDictionary) {

    DictionaryWithDictionary.schema = {
        type: 'Dictionary',
        item: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

})(DictionaryWithDictionary || (DictionaryWithDictionary = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/DictionaryWithProperties.js): ./test/result/v3/javascript/models/DictionaryWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a complex dictionary
 */
export let DictionaryWithProperties;
(function (DictionaryWithProperties) {

    DictionaryWithProperties.schema = {
        type: 'Dictionary',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

})(DictionaryWithProperties || (DictionaryWithProperties = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/DictionaryWithReference.js): ./test/result/v3/javascript/models/DictionaryWithReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string reference
 */
export let DictionaryWithReference;
(function (DictionaryWithReference) {

    DictionaryWithReference.schema = {
        type: 'Dictionary',
        item: 'ModelWithString',
    };

})(DictionaryWithReference || (DictionaryWithReference = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/DictionaryWithString.js): ./test/result/v3/javascript/models/DictionaryWithString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a string dictionary
 */
export let DictionaryWithString;
(function (DictionaryWithString) {

    DictionaryWithString.schema = {
        type: 'Dictionary',
        item: {
            type: 'string',
        },
    };

})(DictionaryWithString || (DictionaryWithString = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/EnumFromDescription.js): ./test/result/v3/javascript/models/EnumFromDescription.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * Success=1,Warning=2,Error=3
 */
export let EnumFromDescription;
(function (EnumFromDescription) {

    EnumFromDescription.ERROR = 3;
    EnumFromDescription.SUCCESS = 1;
    EnumFromDescription.WARNING = 2;

    EnumFromDescription.schema = {
        type: 'Enum',
        enums: [
            3,
            1,
            2,
        ],
    };

})(EnumFromDescription || (EnumFromDescription = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/EnumWithNumbers.js): ./test/result/v3/javascript/models/EnumWithNumbers.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple enum with numbers
 */
export let EnumWithNumbers;
(function (EnumWithNumbers) {

    EnumWithNumbers.NUM_1 = 1;
    EnumWithNumbers.NUM_2 = 2;
    EnumWithNumbers.NUM_3 = 3;

    EnumWithNumbers.schema = {
        type: 'Enum',
        enums: [
            1,
            2,
            3,
        ],
    };

})(EnumWithNumbers || (EnumWithNumbers = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/EnumWithStrings.js): ./test/result/v3/javascript/models/EnumWithStrings.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple enum with strings
 */
export let EnumWithStrings;
(function (EnumWithStrings) {

    EnumWithStrings.ERROR = 'Error';
    EnumWithStrings.SUCCESS = 'Success';
    EnumWithStrings.WARNING = 'Warning';

    EnumWithStrings.schema = {
        type: 'Enum',
        enums: [
            'Error',
            'Success',
            'Warning',
        ],
    };

})(EnumWithStrings || (EnumWithStrings = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelLink.js): ./test/result/v3/javascript/models/ModelLink.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that can have a template??
 */
export let ModelLink;
(function (ModelLink) {

    ModelLink.schema = {
        id: {
            type: 'string',
        },
    };

})(ModelLink || (ModelLink = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelThatExtends.js): ./test/result/v3/javascript/models/ModelThatExtends.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that extends another model
 */
export let ModelThatExtends;
(function (ModelThatExtends) {

    ModelThatExtends.schema = {
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    };

})(ModelThatExtends || (ModelThatExtends = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelThatExtendsExtends.js): ./test/result/v3/javascript/models/ModelThatExtendsExtends.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that extends another model
 */
export let ModelThatExtendsExtends;
(function (ModelThatExtendsExtends) {

    ModelThatExtendsExtends.schema = {
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    };

})(ModelThatExtendsExtends || (ModelThatExtendsExtends = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithArray.js): ./test/result/v3/javascript/models/ModelWithArray.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing an array
 */
export let ModelWithArray;
(function (ModelWithArray) {

    ModelWithArray.schema = {
        prop: {
            type: 'Array',
            item: 'ModelWithString',
        },
        propWithFile: {
            type: 'Array',
            item: {
                type: 'File',
            },
        },
        propWithNumber: {
            type: 'Array',
            item: {
                type: 'number',
            },
        },
    };

})(ModelWithArray || (ModelWithArray = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithBoolean.js): ./test/result/v3/javascript/models/ModelWithBoolean.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one boolean property
 */
export let ModelWithBoolean;
(function (ModelWithBoolean) {

    ModelWithBoolean.schema = {
        prop: {
            type: 'boolean',
        },
    };

})(ModelWithBoolean || (ModelWithBoolean = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithCircularReference.js): ./test/result/v3/javascript/models/ModelWithCircularReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a circular reference
 */
export let ModelWithCircularReference;
(function (ModelWithCircularReference) {

    ModelWithCircularReference.schema = {
        prop: {
            type: 'ModelWithCircularReference',
        },
    };

})(ModelWithCircularReference || (ModelWithCircularReference = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithDictionary.js): ./test/result/v3/javascript/models/ModelWithDictionary.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a dictionary
 */
export let ModelWithDictionary;
(function (ModelWithDictionary) {

    ModelWithDictionary.schema = {
        prop: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

})(ModelWithDictionary || (ModelWithDictionary = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithDuplicateImports.js): ./test/result/v3/javascript/models/ModelWithDuplicateImports.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with duplicated imports
 */
export let ModelWithDuplicateImports;
(function (ModelWithDuplicateImports) {

    ModelWithDuplicateImports.schema = {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    };

})(ModelWithDuplicateImports || (ModelWithDuplicateImports = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithDuplicateProperties.js): ./test/result/v3/javascript/models/ModelWithDuplicateProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with duplicated properties
 */
export let ModelWithDuplicateProperties;
(function (ModelWithDuplicateProperties) {

    ModelWithDuplicateProperties.schema = {
        prop: {
            type: 'ModelWithString',
        },
    };

})(ModelWithDuplicateProperties || (ModelWithDuplicateProperties = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithEnum.js): ./test/result/v3/javascript/models/ModelWithEnum.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one enum
 */
export let ModelWithEnum;
(function (ModelWithEnum) {

    /**
     * This is a simple enum with strings
     */
    ModelWithEnum.Test = {
        SUCCESS: 'Success',
        WARNING: 'Warning',
        ERROR: 'Error',
    };

    ModelWithEnum.schema = {
        Test: {
            type: 'Enum',
            enums: [
                'Success',
                'Warning',
                'Error',
            ],
        },
    };

})(ModelWithEnum || (ModelWithEnum = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithEnumFromDescription.js): ./test/result/v3/javascript/models/ModelWithEnumFromDescription.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one enum
 */
export let ModelWithEnumFromDescription;
(function (ModelWithEnumFromDescription) {

    /**
     * Success=1,Warning=2,Error=3
     */
    ModelWithEnumFromDescription.Test = {
        SUCCESS: 1,
        WARNING: 2,
        ERROR: 3,
    };

    ModelWithEnumFromDescription.schema = {
        Test: {
            type: 'Enum',
            enums: [
                1,
                2,
                3,
            ],
        },
    };

})(ModelWithEnumFromDescription || (ModelWithEnumFromDescription = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithInteger.js): ./test/result/v3/javascript/models/ModelWithInteger.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one number property
 */
export let ModelWithInteger;
(function (ModelWithInteger) {

    ModelWithInteger.schema = {
        prop: {
            type: 'number',
        },
    };

})(ModelWithInteger || (ModelWithInteger = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithLink.js): ./test/result/v3/javascript/models/ModelWithLink.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model that can have a template??
 */
export let ModelWithLink;
(function (ModelWithLink) {

    ModelWithLink.schema = {
        prop: {
            type: 'ModelLink',
        },
    };

})(ModelWithLink || (ModelWithLink = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithNestedEnums.js): ./test/result/v3/javascript/models/ModelWithNestedEnums.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with nested enums
 */
export let ModelWithNestedEnums;
(function (ModelWithNestedEnums) {

    ModelWithNestedEnums.schema = {
        arrayWithDescription: {
            type: 'Array',
            item: {
                type: 'Enum',
                enums: [
                    1,
                    2,
                    3,
                ],
            },
        },
        arrayWithEnum: {
            type: 'Array',
            item: {
                type: 'Enum',
                enums: [
                    'Success',
                    'Warning',
                    'Error',
                ],
            },
        },
        dictionaryWithEnum: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
                enums: [
                    'Success',
                    'Warning',
                    'Error',
                ],
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
                enums: [
                    1,
                    2,
                    3,
                ],
            },
        },
    };

})(ModelWithNestedEnums || (ModelWithNestedEnums = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithNestedProperties.js): ./test/result/v3/javascript/models/ModelWithNestedProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one nested property
 */
export let ModelWithNestedProperties;
(function (ModelWithNestedProperties) {

    ModelWithNestedProperties.schema = {
        first: {
            second: {
                third: {
                    type: 'string',
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
                isReadOnly: true,
                isRequired: true,
                isNullable: true,
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    };

})(ModelWithNestedProperties || (ModelWithNestedProperties = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithProperties.js): ./test/result/v3/javascript/models/ModelWithProperties.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one nested property
 */
export let ModelWithProperties;
(function (ModelWithProperties) {

    ModelWithProperties.schema = {
        boolean: {
            type: 'boolean',
        },
        number: {
            type: 'number',
        },
        reference: {
            type: 'ModelWithString',
        },
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
    };

})(ModelWithProperties || (ModelWithProperties = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithReference.js): ./test/result/v3/javascript/models/ModelWithReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one property containing a reference
 */
export let ModelWithReference;
(function (ModelWithReference) {

    ModelWithReference.schema = {
        prop: {
            type: 'ModelWithString',
        },
    };

})(ModelWithReference || (ModelWithReference = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/ModelWithString.js): ./test/result/v3/javascript/models/ModelWithString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a model with one string property
 */
export let ModelWithString;
(function (ModelWithString) {

    ModelWithString.schema = {
        prop: {
            type: 'string',
        },
    };

})(ModelWithString || (ModelWithString = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/SimpleBoolean.js): ./test/result/v3/javascript/models/SimpleBoolean.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple boolean
 */
export let SimpleBoolean;
(function (SimpleBoolean) {

    SimpleBoolean.schema = {
        type: 'boolean',
    };

})(SimpleBoolean || (SimpleBoolean = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/SimpleFile.js): ./test/result/v3/javascript/models/SimpleFile.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple file
 */
export let SimpleFile;
(function (SimpleFile) {

    SimpleFile.schema = {
        type: 'File',
    };

})(SimpleFile || (SimpleFile = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/SimpleInteger.js): ./test/result/v3/javascript/models/SimpleInteger.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple number
 */
export let SimpleInteger;
(function (SimpleInteger) {

    SimpleInteger.schema = {
        type: 'number',
    };

})(SimpleInteger || (SimpleInteger = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/SimpleReference.js): ./test/result/v3/javascript/models/SimpleReference.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple reference
 */
export let SimpleReference;
(function (SimpleReference) {

    SimpleReference.schema = {
        type: 'ModelWithString',
    };

})(SimpleReference || (SimpleReference = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/models/SimpleString.js): ./test/result/v3/javascript/models/SimpleString.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

/**
 * This is a simple string
 */
export let SimpleString;
(function (SimpleString) {

    SimpleString.schema = {
        type: 'string',
    };

})(SimpleString || (SimpleString = {}));"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/ComplexService.js): ./test/result/v3/javascript/services/ComplexService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ComplexService {

    /**
     * @param parameterReference Parameter containing reference
     * @param parameterObject Parameter containing object
     * @result ModelWithString Successful response
     * @throws ApiError
     */
    static async complexTypes(
        parameterReference,
        parameterObject,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/complex\`,
            query: {
                'parameterReference': parameterReference,
                'parameterObject': parameterObject,
            },
        });

        if (!result.ok) {
            switch (result.status) {
                case 400: throw new ApiError(result, \`400 server error\`);
                case 500: throw new ApiError(result, \`500 server error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/DefaultsService.js): ./test/result/v3/javascript/services/DefaultsService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string
     * @param parameterNumber This is a simple number
     * @param parameterBoolean This is a simple boolean
     * @param parameterEnum This is a simple enum
     * @param parameterModel This is a simple model
     * @throws ApiError
     */
    static async callWithDefaultParameters(
        parameterString = 'Hello World!',
        parameterNumber = 123,
        parameterBoolean = true,
        parameterEnum = 'Success',
        parameterModel = {
            \\"prop\\": \\"Hello World\\"
        },
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/defaults\`,
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/MultipartService.js): ./test/result/v3/javascript/services/MultipartService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class MultipartService {

    /**
     * @result any OK
     * @throws ApiError
     */
    static async multipartResponse() {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/multipart\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/ParametersService.js): ./test/result/v3/javascript/services/ParametersService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param requestBody This is the parameter that goes into the body
     * @throws ApiError
     */
    static async callWithParameters(
        parameterHeader,
        parameterQuery,
        parameterForm,
        parameterCookie,
        requestBody,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/parameters\`,
            cookies: {
                'parameterCookie': parameterCookie,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: requestBody,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/ResponseService.js): ./test/result/v3/javascript/services/ResponseService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ResponseService {

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    static async callWithDuplicateResponses() {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString
     * @throws ApiError
     */
    static async callWithResponse() {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @result ModelThatExtends Message for 201 response
     * @result ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    static async callWithResponses() {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/SimpleService.js): ./test/result/v3/javascript/services/SimpleService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class SimpleService {

    /**
     * @throws ApiError
     */
    static async deleteCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'delete',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async getCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async headCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'head',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async optionsCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'options',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async patchCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'patch',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async postCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    static async putCallWithoutParametersAndResponse() {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 javascript file(./test/result/v3/javascript/services/TypesService.js): ./test/result/v3/javascript/services/TypesService.js 1`] = `
"'use strict';

/* istanbul ignore file */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class TypesService {

    /**
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param id This is a number parameter
     * @result number Response is a simple number
     * @result string Response is a simple string
     * @result boolean Response is a simple boolean
     * @result any Response is a simple object
     * @throws ApiError
     */
    static async types(
        parameterNumber = 123,
        parameterString = 'default',
        parameterBoolean = true,
        parameterObject = null,
        parameterArray,
        parameterDictionary,
        parameterEnum,
        id,
    ) {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/types\`,
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/ApiError.ts): ./test/result/v3/typescript/core/ApiError.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { isSuccess } from './isSuccess';
import { Result } from './Result';

export class ApiError extends Error {

    public readonly url: string;
    public readonly status: number;
    public readonly statusText: string;
    public readonly body: any;

    constructor(result: Readonly<Result>, message: string) {
        super(message);

        this.url = result.url;
        this.status = result.status;
        this.statusText = result.statusText;
        this.body = result.body;
    }
}

export namespace ApiError {
    export enum Message {
        BAD_REQUEST = 'Bad Request',
        UNAUTHORIZED = 'Unauthorized',
        FORBIDDEN = 'Forbidden',
        NOT_FOUND = 'Not Found',
        INTERNAL_SERVER_ERROR = 'Internal Server Error',
        BAD_GATEWAY = 'Bad Gateway',
        SERVICE_UNAVAILABLE = 'Service Unavailable',
        GENERIC_ERROR = 'Generic Error',
    }
}

/**
 * Catch common errors (based on status code).
 * @param result
 */
export function catchGenericError(result: Result): void {
    switch (result.status) {
        case 400: throw new ApiError(result, ApiError.Message.BAD_REQUEST);
        case 401: throw new ApiError(result, ApiError.Message.UNAUTHORIZED);
        case 403: throw new ApiError(result, ApiError.Message.FORBIDDEN);
        case 404: throw new ApiError(result, ApiError.Message.NOT_FOUND);
        case 500: throw new ApiError(result, ApiError.Message.INTERNAL_SERVER_ERROR);
        case 502: throw new ApiError(result, ApiError.Message.BAD_GATEWAY);
        case 503: throw new ApiError(result, ApiError.Message.SERVICE_UNAVAILABLE);
    }

    if (!isSuccess(result.status)) {
        throw new ApiError(result, ApiError.Message.GENERIC_ERROR);
    }
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/OpenAPI.ts): ./test/result/v3/typescript/core/OpenAPI.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export namespace OpenAPI {
    export let BASE = '/api';
    export let VERSION = '1';
    export let CLIENT = 'fetch';
    export let TOKEN = '';
}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/RequestOptions.ts): ./test/result/v3/typescript/core/RequestOptions.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export interface RequestOptions {
    method: 'get' | 'put' | 'post' | 'delete' | 'options' | 'head' | 'patch';
    path: string;
    cookies?: { [key: string]: any };
    headers?: { [key: string]: any };
    query?: { [key: string]: any };
    formData?: { [key: string]: any };
    body?: any;
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/Result.ts): ./test/result/v3/typescript/core/Result.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export interface Result {
    url: string;
    ok: boolean;
    status: number;
    statusText: string;
    body: any;
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/Schema.ts): ./test/result/v3/typescript/core/Schema.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Dictionary } from \\"../models/Dictionary\\";

type FieldSchema = {
    readonly type?: string;
    readonly isReadOnly?: boolean;
    readonly isRequired?: boolean;
    readonly isNullable?: boolean;
    readonly format?: 'int32' | 'int64' | 'float' | 'double' | 'string' | 'boolean' | 'byte' | 'binary' | 'date' | 'date-time' | 'password';
    readonly maximum?: number;
    readonly exclusiveMaximum?: boolean;
    readonly minimum?: number;
    readonly exclusiveMinimum?: boolean;
    readonly multipleOf?: number;
    readonly maxLength?: number;
    readonly minLength?: number;
    readonly pattern?: string;
    readonly maxItems?: number;
    readonly minItems?: number;
    readonly uniqueItems?: boolean;
    readonly maxProperties?: number;
    readonly minProperties?: number;
}

type ArraySchema<T> = FieldSchema & {
    readonly item: Schema<T>;
}

type DictionarySchema<T> = FieldSchema & {
    readonly item: Schema<T>;
}

type ObjectSchema<T> = FieldSchema & {
    readonly [K in keyof T]: Schema<T[K]>;
}

export type Schema<T> =
    T extends string ? FieldSchema :
    T extends number ? FieldSchema :
    T extends boolean ? FieldSchema :
    T extends File ? FieldSchema :
    T extends Blob ? FieldSchema :
    T extends Array<infer U> ? ArraySchema<U> :
    T extends Dictionary<infer U> ? DictionarySchema<U> :
    T extends Object ? ObjectSchema<T> :
    FieldSchema
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/getFormData.ts): ./test/result/v3/typescript/core/getFormData.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get FormData from object. This method is needed to upload
 * multipart form data to the REST API.
 * @param params Key value based object.
 */
export function getFormData(params: { [key: string]: any }): FormData {
    const formData = new FormData();
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value: any = params[key];
            if (value !== undefined && value !== null) {
                formData.append(key, value);
            }
        }
    }
    return formData;
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/getQueryString.ts): ./test/result/v3/typescript/core/getQueryString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Get query string from query parameters object. This method also
 * supports multi-value items by creating a key for each item.
 * @param params Key value based object.
 */
export function getQueryString(params: { [key: string]: any }): string {
    const qs: string[] = [];
    for (const key in params) {
        if (typeof params[key] !== 'undefined') {
            const value: any = params[key];
            if (value !== undefined && value !== null) {
                if (Array.isArray(value)) {
                    value.forEach(value => {
                        qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                    });
                } else {
                    qs.push(\`\${encodeURIComponent(key)}=\${encodeURIComponent(String(value))}\`);
                }
            }
        }
    }
    if (qs.length > 0) {
        return \`?\${qs.join('&')}\`;
    }
    return '';
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/isSuccess.ts): ./test/result/v3/typescript/core/isSuccess.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

/**
 * Check success response code.
 * @param status Status code
 */
export function isSuccess(status: number): boolean {
    return status >= 200 && status < 300;
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/request.ts): ./test/result/v3/typescript/core/request.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import {getFormData} from './getFormData';
import {getQueryString} from './getQueryString';
import {OpenAPI} from './OpenAPI';
import {RequestOptions} from './RequestOptions';
import {requestUsingFetch} from './requestUsingFetch';
import {requestUsingXHR} from './requestUsingXHR';
import {Result} from './Result';

/**
 * Create the request.
 * @param options Request method options.
 * @returns Result object (see above)
 */
export async function request(options: Readonly<RequestOptions>): Promise<Result> {

    // Create the request URL
    let url = \`\${OpenAPI.BASE}\${options.path}\`;

    // Create request headers
    const headers = new Headers({
        ...options.headers,
        Accept: 'application/json'
    });

    // Create request settings
    const request: RequestInit = {
        headers,
        method: options.method,
        credentials: 'same-origin'
    };

    // If we have a bearer token then we set the authentication header.
    if (OpenAPI.TOKEN !== null && OpenAPI.TOKEN !== '') {
        headers.append('Authorization', \`Bearer \${OpenAPI.TOKEN}\`);
    }

    // Add the query parameters (if defined).
    if (options.query) {
        url += getQueryString(options.query);
    }

    // Append formData as body
    if (options.formData) {
        request.body = getFormData(options.formData);
    } else if (options.body) {

        // If this is blob data, then pass it directly to the body and set content type.
        // Otherwise we just convert request data to JSON string (needed for fetch api)
        if (options.body instanceof Blob) {
            request.body = options.body;
            if (options.body.type) {
                headers.append('Content-Type', options.body.type);
            }
        } else {
            request.body = JSON.stringify(options.body);
            headers.append('Content-Type', 'application/json');
        }
    }

    try {
        switch (OpenAPI.CLIENT) {
            case 'xhr':
                return await requestUsingXHR(url, request);
            default:
                return await requestUsingFetch(url, request);
        }
    } catch (error) {
        return {
            url,
            ok: false,
            status: 0,
            statusText: '',
            body: error
        };
    }
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/requestUsingFetch.ts): ./test/result/v3/typescript/core/requestUsingFetch.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Result } from './Result';

/**
 * Request content using the new Fetch API. This is the default API that is used and
 * is create for all JSON, XML and text objects. However it is limited to UTF-8.
 * This is a problem for some of the Docs content, since that requires UTF-16!
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingFetch(url: string, request: Readonly<RequestInit>): Promise<Result> {

    // Fetch response using fetch API.
    const response = await fetch(url, request);

    // Create result object.
    const result: Result = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: null
    };

    // Try to parse the content for any response status code.
    // We check the \\"Content-Type\\" header to see if we need to parse the
    // content as json or as plain text.
    const contentType = response.headers.get('Content-Type');
    if (contentType) {
        switch (contentType.toLowerCase()) {
            case 'application/json':
            case 'application/json; charset=utf-8':
                result.body = await response.json();
                break;

            case 'text/plain':
            case 'text/xml':
            case 'text/xml; charset=utf-8':
            case 'text/xml; charset=utf-16':
                result.body = await response.text();
                break;
        }
    }

    return result;
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/core/requestUsingXHR.ts): ./test/result/v3/typescript/core/requestUsingXHR.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Result } from './Result';
import { isSuccess } from './isSuccess';

/**
 * Request content using the new legacy XMLHttpRequest API. This method is useful
 * when we want to request UTF-16 content, since it natively supports loading UTF-16.
 * We could do the same with the Fetch API, but then we will need to convert the
 * content using JavaScript... And that is very very slow.
 * @param url The url to request.
 * @param request The request object, containing method, headers, body, etc.
 */
export async function requestUsingXHR(url: string, request: Readonly<RequestInit>): Promise<Result> {
    return new Promise(resolve => {
        const xhr = new XMLHttpRequest();

        // Open the request, remember to do this before adding any headers,
        // because the request needs to be initialized!
        xhr.open(request.method!, url, true);

        // Add the headers (required when dealing with JSON)
        const headers = request.headers as Headers;
        headers.forEach((value: string, key: string): void => {
            xhr.setRequestHeader(key, value);
        });

        // Register the readystate handler, this will fire when the request is done.
        xhr.onreadystatechange = () => {
            if (xhr.readyState === XMLHttpRequest.DONE) {

                // Create result object.
                const result: Result = {
                    url,
                    ok: isSuccess(xhr.status),
                    status: xhr.status,
                    statusText: xhr.statusText,
                    body: null
                };

                // Try to parse the content for any response status code.
                // We check the \\"Content-Type\\" header to see if we need to parse the
                // content as json or as plain text.
                const contentType = xhr.getResponseHeader('Content-Type');
                if (contentType) {
                    switch (contentType.toLowerCase()) {
                        case 'application/json':
                        case 'application/json; charset=utf-8':
                            result.body = JSON.parse(xhr.responseText);
                            break;

                        case 'text/plain':
                        case 'text/xml':
                        case 'text/xml; charset=utf-8':
                        case 'text/xml; charset=utf-16':
                            result.body = xhr.responseText;
                            break;
                    }
                }

                // Done!
                resolve(result);
            }
        };

        // Start the request!
        xhr.send(request.body);
    });
}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/index.ts): ./test/result/v3/typescript/index.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

export { ApiError } from './core/ApiError';
export { isSuccess } from './core/isSuccess';
export { OpenAPI } from './core/OpenAPI';
import { Schema } from './core/Schema';

import { ArrayWithArray } from './models/ArrayWithArray';
import { ArrayWithBooleans } from './models/ArrayWithBooleans';
import { ArrayWithNumbers } from './models/ArrayWithNumbers';
import { ArrayWithProperties } from './models/ArrayWithProperties';
import { ArrayWithReferences } from './models/ArrayWithReferences';
import { ArrayWithStrings } from './models/ArrayWithStrings';
import { Dictionary } from './models/Dictionary';
import { DictionaryWithArray } from './models/DictionaryWithArray';
import { DictionaryWithDictionary } from './models/DictionaryWithDictionary';
import { DictionaryWithProperties } from './models/DictionaryWithProperties';
import { DictionaryWithReference } from './models/DictionaryWithReference';
import { DictionaryWithString } from './models/DictionaryWithString';
import { EnumFromDescription } from './models/EnumFromDescription';
import { EnumWithNumbers } from './models/EnumWithNumbers';
import { EnumWithStrings } from './models/EnumWithStrings';
import { ModelLink } from './models/ModelLink';
import { ModelThatExtends } from './models/ModelThatExtends';
import { ModelThatExtendsExtends } from './models/ModelThatExtendsExtends';
import { ModelWithArray } from './models/ModelWithArray';
import { ModelWithBoolean } from './models/ModelWithBoolean';
import { ModelWithCircularReference } from './models/ModelWithCircularReference';
import { ModelWithDictionary } from './models/ModelWithDictionary';
import { ModelWithDuplicateImports } from './models/ModelWithDuplicateImports';
import { ModelWithDuplicateProperties } from './models/ModelWithDuplicateProperties';
import { ModelWithEnum } from './models/ModelWithEnum';
import { ModelWithEnumFromDescription } from './models/ModelWithEnumFromDescription';
import { ModelWithInteger } from './models/ModelWithInteger';
import { ModelWithLink } from './models/ModelWithLink';
import { ModelWithNestedEnums } from './models/ModelWithNestedEnums';
import { ModelWithNestedProperties } from './models/ModelWithNestedProperties';
import { ModelWithProperties } from './models/ModelWithProperties';
import { ModelWithReference } from './models/ModelWithReference';
import { ModelWithString } from './models/ModelWithString';
import { SimpleBoolean } from './models/SimpleBoolean';
import { SimpleFile } from './models/SimpleFile';
import { SimpleInteger } from './models/SimpleInteger';
import { SimpleReference } from './models/SimpleReference';
import { SimpleString } from './models/SimpleString';

export { ArrayWithArray };
export { ArrayWithBooleans };
export { ArrayWithNumbers };
export { ArrayWithProperties };
export { ArrayWithReferences };
export { ArrayWithStrings };
export { Dictionary };
export { DictionaryWithArray };
export { DictionaryWithDictionary };
export { DictionaryWithProperties };
export { DictionaryWithReference };
export { DictionaryWithString };
export { EnumFromDescription };
export { EnumWithNumbers };
export { EnumWithStrings };
export { ModelLink };
export { ModelThatExtends };
export { ModelThatExtendsExtends };
export { ModelWithArray };
export { ModelWithBoolean };
export { ModelWithCircularReference };
export { ModelWithDictionary };
export { ModelWithDuplicateImports };
export { ModelWithDuplicateProperties };
export { ModelWithEnum };
export { ModelWithEnumFromDescription };
export { ModelWithInteger };
export { ModelWithLink };
export { ModelWithNestedEnums };
export { ModelWithNestedProperties };
export { ModelWithProperties };
export { ModelWithReference };
export { ModelWithString };
export { SimpleBoolean };
export { SimpleFile };
export { SimpleInteger };
export { SimpleReference };
export { SimpleString };

export { ComplexService } from './services/ComplexService';
export { DefaultsService } from './services/DefaultsService';
export { MultipartService } from './services/MultipartService';
export { ParametersService } from './services/ParametersService';
export { ResponseService } from './services/ResponseService';
export { SimpleService } from './services/SimpleService';
export { TypesService } from './services/TypesService';

const schemas = {
    'ArrayWithArray': ArrayWithArray.schema,
    'ArrayWithBooleans': ArrayWithBooleans.schema,
    'ArrayWithNumbers': ArrayWithNumbers.schema,
    'ArrayWithProperties': ArrayWithProperties.schema,
    'ArrayWithReferences': ArrayWithReferences.schema,
    'ArrayWithStrings': ArrayWithStrings.schema,
    'Dictionary': Dictionary.schema,
    'DictionaryWithArray': DictionaryWithArray.schema,
    'DictionaryWithDictionary': DictionaryWithDictionary.schema,
    'DictionaryWithProperties': DictionaryWithProperties.schema,
    'DictionaryWithReference': DictionaryWithReference.schema,
    'DictionaryWithString': DictionaryWithString.schema,
    'EnumFromDescription': EnumFromDescription.schema,
    'EnumWithNumbers': EnumWithNumbers.schema,
    'EnumWithStrings': EnumWithStrings.schema,
    'ModelLink': ModelLink.schema,
    'ModelThatExtends': ModelThatExtends.schema,
    'ModelThatExtendsExtends': ModelThatExtendsExtends.schema,
    'ModelWithArray': ModelWithArray.schema,
    'ModelWithBoolean': ModelWithBoolean.schema,
    'ModelWithCircularReference': ModelWithCircularReference.schema,
    'ModelWithDictionary': ModelWithDictionary.schema,
    'ModelWithDuplicateImports': ModelWithDuplicateImports.schema,
    'ModelWithDuplicateProperties': ModelWithDuplicateProperties.schema,
    'ModelWithEnum': ModelWithEnum.schema,
    'ModelWithEnumFromDescription': ModelWithEnumFromDescription.schema,
    'ModelWithInteger': ModelWithInteger.schema,
    'ModelWithLink': ModelWithLink.schema,
    'ModelWithNestedEnums': ModelWithNestedEnums.schema,
    'ModelWithNestedProperties': ModelWithNestedProperties.schema,
    'ModelWithProperties': ModelWithProperties.schema,
    'ModelWithReference': ModelWithReference.schema,
    'ModelWithString': ModelWithString.schema,
    'SimpleBoolean': SimpleBoolean.schema,
    'SimpleFile': SimpleFile.schema,
    'SimpleInteger': SimpleInteger.schema,
    'SimpleReference': SimpleReference.schema,
    'SimpleString': SimpleString.schema,
};

export function getSchema<K extends keyof typeof schemas>(schema: K) {
    if (schemas.hasOwnProperty(schema)) {
        return schemas[schema];
    }
    return null;
}

"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithArray.ts): ./test/result/v3/typescript/models/ArrayWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple array containing an array
 */
export type ArrayWithArray = Array<Array<ModelWithString>>;

export namespace ArrayWithArray {

    export const schema: Schema<ArrayWithArray> = {
        type: 'Array',
        item: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithBooleans.ts): ./test/result/v3/typescript/models/ArrayWithBooleans.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with booleans
 */
export type ArrayWithBooleans = Array<boolean>;

export namespace ArrayWithBooleans {

    export const schema: Schema<ArrayWithBooleans> = {
        type: 'Array',
        item: {
            type: 'boolean',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithNumbers.ts): ./test/result/v3/typescript/models/ArrayWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with numbers
 */
export type ArrayWithNumbers = Array<number>;

export namespace ArrayWithNumbers {

    export const schema: Schema<ArrayWithNumbers> = {
        type: 'Array',
        item: {
            type: 'number',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithProperties.ts): ./test/result/v3/typescript/models/ArrayWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with properties
 */
export type ArrayWithProperties = Array<{
    foo?: string,
    bar?: string,
}>;

export namespace ArrayWithProperties {

    export const schema: Schema<ArrayWithProperties> = {
        type: 'Array',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithReferences.ts): ./test/result/v3/typescript/models/ArrayWithReferences.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple array with references
 */
export type ArrayWithReferences = Array<ModelWithString>;

export namespace ArrayWithReferences {

    export const schema: Schema<ArrayWithReferences> = {
        type: 'Array',
        item: {
            type: 'ModelWithString',
        }
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ArrayWithStrings.ts): ./test/result/v3/typescript/models/ArrayWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple array with strings
 */
export type ArrayWithStrings = Array<string>;

export namespace ArrayWithStrings {

    export const schema: Schema<ArrayWithStrings> = {
        type: 'Array',
        item: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/Dictionary.ts): ./test/result/v3/typescript/models/Dictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

export interface Dictionary<T> {

    /**
     * @internal
     */
    readonly __type: T,

    [key: string]: T;
}

export namespace Dictionary {

    export const schema: Schema<Dictionary<any>> = {
        type: 'Dictionary',
        item: {
            type: 'any'
        }
    };

}
"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/DictionaryWithArray.ts): ./test/result/v3/typescript/models/DictionaryWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a complex dictionary
 */
export type DictionaryWithArray = Dictionary<Array<ModelWithString>>;

export namespace DictionaryWithArray {

    export const schema: Schema<DictionaryWithArray> = {
        type: 'Dictionary',
        item: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/DictionaryWithDictionary.ts): ./test/result/v3/typescript/models/DictionaryWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a string dictionary
 */
export type DictionaryWithDictionary = Dictionary<Dictionary<string>>;

export namespace DictionaryWithDictionary {

    export const schema: Schema<DictionaryWithDictionary> = {
        type: 'Dictionary',
        item: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/DictionaryWithProperties.ts): ./test/result/v3/typescript/models/DictionaryWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a complex dictionary
 */
export type DictionaryWithProperties = Dictionary<{
    foo?: string,
    bar?: string,
}>;

export namespace DictionaryWithProperties {

    export const schema: Schema<DictionaryWithProperties> = {
        type: 'Dictionary',
        item: {
            foo: {
                type: 'string',
            },
            bar: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/DictionaryWithReference.ts): ./test/result/v3/typescript/models/DictionaryWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a string reference
 */
export type DictionaryWithReference = Dictionary<ModelWithString>;

export namespace DictionaryWithReference {

    export const schema: Schema<DictionaryWithReference> = {
        type: 'Dictionary',
        item: {
            type: 'ModelWithString',
        }
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/DictionaryWithString.ts): ./test/result/v3/typescript/models/DictionaryWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a string dictionary
 */
export type DictionaryWithString = Dictionary<string>;

export namespace DictionaryWithString {

    export const schema: Schema<DictionaryWithString> = {
        type: 'Dictionary',
        item: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/EnumFromDescription.ts): ./test/result/v3/typescript/models/EnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * Success=1,Warning=2,Error=3
 */
export enum EnumFromDescription {
    ERROR = 3,
    SUCCESS = 1,
    WARNING = 2,
}

export namespace EnumFromDescription {

    export const schema: Schema<EnumFromDescription> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/EnumWithNumbers.ts): ./test/result/v3/typescript/models/EnumWithNumbers.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple enum with numbers
 */
export enum EnumWithNumbers {
    NUM_1 = 1,
    NUM_2 = 2,
    NUM_3 = 3,
}

export namespace EnumWithNumbers {

    export const schema: Schema<EnumWithNumbers> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/EnumWithStrings.ts): ./test/result/v3/typescript/models/EnumWithStrings.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple enum with strings
 */
export enum EnumWithStrings {
    ERROR = 'Error',
    SUCCESS = 'Success',
    WARNING = 'Warning',
}

export namespace EnumWithStrings {

    export const schema: Schema<EnumWithStrings> = {
        type: 'Enum',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelLink.ts): ./test/result/v3/typescript/models/ModelLink.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model that can have a template??
 */
export interface ModelLink {
    id?: string;
}

export namespace ModelLink {

    export const schema: Schema<ModelLink> = {
        id: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelThatExtends.ts): ./test/result/v3/typescript/models/ModelThatExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that extends another model
 */
export interface ModelThatExtends extends ModelWithString {
    propExtendsA?: string;
    propExtendsB?: ModelWithString;
}

export namespace ModelThatExtends {

    export const schema: Schema<ModelThatExtends> = {
        propExtendsA: {
            type: 'string',
        },
        propExtendsB: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelThatExtendsExtends.ts): ./test/result/v3/typescript/models/ModelThatExtendsExtends.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that extends another model
 */
export interface ModelThatExtendsExtends extends ModelWithString, ModelThatExtends {
    propExtendsC?: string;
    propExtendsD?: ModelWithString;
}

export namespace ModelThatExtendsExtends {

    export const schema: Schema<ModelThatExtendsExtends> = {
        propExtendsC: {
            type: 'string',
        },
        propExtendsD: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithArray.ts): ./test/result/v3/typescript/models/ModelWithArray.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one property containing an array
 */
export interface ModelWithArray {
    prop?: Array<ModelWithString>;
    propWithFile?: Array<File>;
    propWithNumber?: Array<number>;
}

export namespace ModelWithArray {

    export const schema: Schema<ModelWithArray> = {
        prop: {
            type: 'Array',
            item: {
                type: 'ModelWithString',
            }
        },
        propWithFile: {
            type: 'Array',
            item: {
                type: 'File',
            },
        },
        propWithNumber: {
            type: 'Array',
            item: {
                type: 'number',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithBoolean.ts): ./test/result/v3/typescript/models/ModelWithBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one boolean property
 */
export interface ModelWithBoolean {
    /**
     * This is a simple boolean property
     */
    prop?: boolean;
}

export namespace ModelWithBoolean {

    export const schema: Schema<ModelWithBoolean> = {
        prop: {
            type: 'boolean',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithCircularReference.ts): ./test/result/v3/typescript/models/ModelWithCircularReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one property containing a circular reference
 */
export interface ModelWithCircularReference {
    prop?: ModelWithCircularReference;
}

export namespace ModelWithCircularReference {

    export const schema: Schema<ModelWithCircularReference> = {
        prop: {
            type: 'ModelWithCircularReference',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithDictionary.ts): ./test/result/v3/typescript/models/ModelWithDictionary.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a model with one property containing a dictionary
 */
export interface ModelWithDictionary {
    prop?: Dictionary<string>;
}

export namespace ModelWithDictionary {

    export const schema: Schema<ModelWithDictionary> = {
        prop: {
            type: 'Dictionary',
            item: {
                type: 'string',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithDuplicateImports.ts): ./test/result/v3/typescript/models/ModelWithDuplicateImports.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with duplicated imports
 */
export interface ModelWithDuplicateImports {
    propA?: ModelWithString;
    propB?: ModelWithString;
    propC?: ModelWithString;
}

export namespace ModelWithDuplicateImports {

    export const schema: Schema<ModelWithDuplicateImports> = {
        propA: {
            type: 'ModelWithString',
        },
        propB: {
            type: 'ModelWithString',
        },
        propC: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithDuplicateProperties.ts): ./test/result/v3/typescript/models/ModelWithDuplicateProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with duplicated properties
 */
export interface ModelWithDuplicateProperties {
    prop?: ModelWithString;
}

export namespace ModelWithDuplicateProperties {

    export const schema: Schema<ModelWithDuplicateProperties> = {
        prop: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithEnum.ts): ./test/result/v3/typescript/models/ModelWithEnum.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one enum
 */
export interface ModelWithEnum {
    /**
     * This is a simple enum with strings
     */
    Test?: ModelWithEnum.Test;
}

export namespace ModelWithEnum {

    /**
     * This is a simple enum with strings
     */
    export enum Test {
        SUCCESS = 'Success',
        WARNING = 'Warning',
        ERROR = 'Error',
    }

    export const schema: Schema<ModelWithEnum> = {
        Test: {
            type: 'Enum',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithEnumFromDescription.ts): ./test/result/v3/typescript/models/ModelWithEnumFromDescription.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one enum
 */
export interface ModelWithEnumFromDescription {
    /**
     * Success=1,Warning=2,Error=3
     */
    Test?: ModelWithEnumFromDescription.Test;
}

export namespace ModelWithEnumFromDescription {

    /**
     * Success=1,Warning=2,Error=3
     */
    export enum Test {
        SUCCESS = 1,
        WARNING = 2,
        ERROR = 3,
    }

    export const schema: Schema<ModelWithEnumFromDescription> = {
        Test: {
            type: 'Enum',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithInteger.ts): ./test/result/v3/typescript/models/ModelWithInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one number property
 */
export interface ModelWithInteger {
    /**
     * This is a simple number property
     */
    prop?: number;
}

export namespace ModelWithInteger {

    export const schema: Schema<ModelWithInteger> = {
        prop: {
            type: 'number',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithLink.ts): ./test/result/v3/typescript/models/ModelWithLink.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelLink } from '../models/ModelLink';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model that can have a template??
 */
export interface ModelWithLink {
    prop?: ModelLink;
}

export namespace ModelWithLink {

    export const schema: Schema<ModelWithLink> = {
        prop: {
            type: 'ModelLink',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithNestedEnums.ts): ./test/result/v3/typescript/models/ModelWithNestedEnums.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { Dictionary } from '../models/Dictionary';

/**
 * This is a model with nested enums
 */
export interface ModelWithNestedEnums {
    arrayWithDescription?: Array<(1 | 2 | 3)>;
    arrayWithEnum?: Array<('Success' | 'Warning' | 'Error')>;
    dictionaryWithEnum?: Dictionary<('Success' | 'Warning' | 'Error')>;
    dictionaryWithEnumFromDescription?: Dictionary<(1 | 2 | 3)>;
}

export namespace ModelWithNestedEnums {

    export const schema: Schema<ModelWithNestedEnums> = {
        arrayWithDescription: {
            type: 'Array',
            item: {
                type: 'Enum',
            },
        },
        arrayWithEnum: {
            type: 'Array',
            item: {
                type: 'Enum',
            },
        },
        dictionaryWithEnum: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
            },
        },
        dictionaryWithEnumFromDescription: {
            type: 'Dictionary',
            item: {
                type: 'Enum',
            },
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithNestedProperties.ts): ./test/result/v3/typescript/models/ModelWithNestedProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one nested property
 */
export interface ModelWithNestedProperties {
    readonly first: {
        readonly second: {
            readonly third: string | null,
        } | null,
    } | null;
}

export namespace ModelWithNestedProperties {

    export const schema: Schema<ModelWithNestedProperties> = {
        first: {
            second: {
                third: {
                    type: 'string',
                    isReadOnly: true,
                    isRequired: true,
                    isNullable: true,
                },
                isReadOnly: true,
                isRequired: true,
                isNullable: true,
            },
            isReadOnly: true,
            isRequired: true,
            isNullable: true,
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithProperties.ts): ./test/result/v3/typescript/models/ModelWithProperties.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one nested property
 */
export interface ModelWithProperties {
    boolean?: boolean;
    number?: number;
    reference?: ModelWithString;
    required: string;
    requiredAndNullable: string | null;
    readonly requiredAndReadOnly: string;
    string?: string;
}

export namespace ModelWithProperties {

    export const schema: Schema<ModelWithProperties> = {
        boolean: {
            type: 'boolean',
        },
        number: {
            type: 'number',
        },
        reference: {
            type: 'ModelWithString',
        },
        required: {
            type: 'string',
            isRequired: true,
        },
        requiredAndNullable: {
            type: 'string',
            isRequired: true,
            isNullable: true,
        },
        requiredAndReadOnly: {
            type: 'string',
            isReadOnly: true,
            isRequired: true,
        },
        string: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithReference.ts): ./test/result/v3/typescript/models/ModelWithReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a model with one property containing a reference
 */
export interface ModelWithReference {
    prop?: ModelWithString;
}

export namespace ModelWithReference {

    export const schema: Schema<ModelWithReference> = {
        prop: {
            type: 'ModelWithString',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/ModelWithString.ts): ./test/result/v3/typescript/models/ModelWithString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a model with one string property
 */
export interface ModelWithString {
    /**
     * This is a simple string property
     */
    prop?: string;
}

export namespace ModelWithString {

    export const schema: Schema<ModelWithString> = {
        prop: {
            type: 'string',
        },
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/SimpleBoolean.ts): ./test/result/v3/typescript/models/SimpleBoolean.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple boolean
 */
export type SimpleBoolean = boolean;

export namespace SimpleBoolean {

    export const schema: Schema<SimpleBoolean> = {
        type: 'boolean',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/SimpleFile.ts): ./test/result/v3/typescript/models/SimpleFile.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple file
 */
export type SimpleFile = File;

export namespace SimpleFile {

    export const schema: Schema<SimpleFile> = {
        type: 'File',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/SimpleInteger.ts): ./test/result/v3/typescript/models/SimpleInteger.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple number
 */
export type SimpleInteger = number;

export namespace SimpleInteger {

    export const schema: Schema<SimpleInteger> = {
        type: 'number',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/SimpleReference.ts): ./test/result/v3/typescript/models/SimpleReference.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';
import { ModelWithString } from '../models/ModelWithString';

/**
 * This is a simple reference
 */
export type SimpleReference = ModelWithString;

export namespace SimpleReference {

    export const schema: Schema<SimpleReference> = {
        type: 'ModelWithString',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/models/SimpleString.ts): ./test/result/v3/typescript/models/SimpleString.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { Schema } from '../core/Schema';

/**
 * This is a simple string
 */
export type SimpleString = string;

export namespace SimpleString {

    export const schema: Schema<SimpleString> = {
        type: 'string',
    };

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/ComplexService.ts): ./test/result/v3/typescript/services/ComplexService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ComplexService {

    /**
     * @param parameterReference Parameter containing reference
     * @param parameterObject Parameter containing object
     * @result ModelWithString Successful response
     * @throws ApiError
     */
    public static async complexTypes(
        parameterReference: ModelWithString,
        parameterObject?: {
            first?: {
                second?: {
                    third?: string,
                },
            },
        },
    ): Promise<Array<ModelWithString>> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/complex\`,
            query: {
                'parameterReference': parameterReference,
                'parameterObject': parameterObject,
            },
        });

        if (!result.ok) {
            switch (result.status) {
                case 400: throw new ApiError(result, \`400 server error\`);
                case 500: throw new ApiError(result, \`500 server error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/DefaultsService.ts): ./test/result/v3/typescript/services/DefaultsService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class DefaultsService {

    /**
     * @param parameterString This is a simple string
     * @param parameterNumber This is a simple number
     * @param parameterBoolean This is a simple boolean
     * @param parameterEnum This is a simple enum
     * @param parameterModel This is a simple model
     * @throws ApiError
     */
    public static async callWithDefaultParameters(
        parameterString: string = 'Hello World!',
        parameterNumber: number = 123,
        parameterBoolean: boolean = true,
        parameterEnum: ('Success' | 'Warning' | 'Error') = 'Success',
        parameterModel: ModelWithString | null = {
            \\"prop\\": \\"Hello World\\"
        },
    ): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/defaults\`,
            query: {
                'parameterString': parameterString,
                'parameterNumber': parameterNumber,
                'parameterBoolean': parameterBoolean,
                'parameterEnum': parameterEnum,
                'parameterModel': parameterModel,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/MultipartService.ts): ./test/result/v3/typescript/services/MultipartService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class MultipartService {

    /**
     * @result any OK
     * @throws ApiError
     */
    public static async multipartResponse(): Promise<{
        file?: string,
        metadata?: {
            foo?: string,
            bar?: string,
        },
    }> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/multipart\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/ParametersService.ts): ./test/result/v3/typescript/services/ParametersService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ParametersService {

    /**
     * @param parameterHeader This is the parameter that goes into the request header
     * @param parameterQuery This is the parameter that goes into the request query params
     * @param parameterForm This is the parameter that goes into the request form data
     * @param parameterCookie This is the parameter that goes into the cookie
     * @param requestBody This is the parameter that goes into the body
     * @throws ApiError
     */
    public static async callWithParameters(
        parameterHeader?: string,
        parameterQuery?: string,
        parameterForm?: string,
        parameterCookie?: string,
        requestBody?: ModelWithString,
    ): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/parameters\`,
            cookies: {
                'parameterCookie': parameterCookie,
            },
            headers: {
                'parameterHeader': parameterHeader,
            },
            query: {
                'parameterQuery': parameterQuery,
            },
            formData: {
                'parameterForm': parameterForm,
            },
            body: requestBody,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/ResponseService.ts): ./test/result/v3/typescript/services/ResponseService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ModelThatExtends } from '../models/ModelThatExtends';
import { ModelThatExtendsExtends } from '../models/ModelThatExtendsExtends';
import { ModelWithString } from '../models/ModelWithString';
import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class ResponseService {

    /**
     * @result ModelWithString Message for default response
     * @throws ApiError
     */
    public static async callWithDuplicateResponses(): Promise<ModelWithString> {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString
     * @throws ApiError
     */
    public static async callWithResponse(): Promise<ModelWithString> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @result ModelWithString Message for default response
     * @result ModelThatExtends Message for 201 response
     * @result ModelThatExtendsExtends Message for 202 response
     * @throws ApiError
     */
    public static async callWithResponses(): Promise<ModelWithString | ModelThatExtends | ModelThatExtendsExtends> {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/response\`,
        });

        if (!result.ok) {
            switch (result.status) {
                case 500: throw new ApiError(result, \`Message for 500 error\`);
                case 501: throw new ApiError(result, \`Message for 501 error\`);
                case 502: throw new ApiError(result, \`Message for 502 error\`);
            }
        }

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/SimpleService.ts): ./test/result/v3/typescript/services/SimpleService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class SimpleService {

    /**
     * @throws ApiError
     */
    public static async deleteCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'delete',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async getCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async headCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'head',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async optionsCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'options',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async patchCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'patch',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async postCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'post',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

    /**
     * @throws ApiError
     */
    public static async putCallWithoutParametersAndResponse(): Promise<void> {

        const result = await $request({
            method: 'put',
            path: \`/api/v\${OpenAPI.VERSION}/simple\`,
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;

exports[`generation v3 typescript file(./test/result/v3/typescript/services/TypesService.ts): ./test/result/v3/typescript/services/TypesService.ts 1`] = `
"/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */

import { ApiError, catchGenericError } from '../core/ApiError';
import { request as $request } from '../core/request';
import { OpenAPI } from '../core/OpenAPI';

export class TypesService {

    /**
     * @param parameterNumber This is a number parameter
     * @param parameterString This is a string parameter
     * @param parameterBoolean This is a boolean parameter
     * @param parameterObject This is an object parameter
     * @param parameterArray This is an array parameter
     * @param parameterDictionary This is a dictionary parameter
     * @param parameterEnum This is an enum parameter
     * @param id This is a number parameter
     * @result number Response is a simple number
     * @result string Response is a simple string
     * @result boolean Response is a simple boolean
     * @result any Response is a simple object
     * @throws ApiError
     */
    public static async types(
        parameterNumber: number = 123,
        parameterString: string = 'default',
        parameterBoolean: boolean = true,
        parameterObject: any = null,
        parameterArray?: Array<string>,
        parameterDictionary?: any,
        parameterEnum?: ('Success' | 'Warning' | 'Error'),
        id?: number,
    ): Promise<number | string | boolean | any> {

        const result = await $request({
            method: 'get',
            path: \`/api/v\${OpenAPI.VERSION}/types\`,
            query: {
                'parameterNumber': parameterNumber,
                'parameterString': parameterString,
                'parameterBoolean': parameterBoolean,
                'parameterObject': parameterObject,
                'parameterArray': parameterArray,
                'parameterDictionary': parameterDictionary,
                'parameterEnum': parameterEnum,
            },
        });

        catchGenericError(result);

        return result.body;
    }

}"
`;
