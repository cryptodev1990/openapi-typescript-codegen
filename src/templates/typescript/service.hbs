/* istanbul ignore file */
/* tslint:disable */
/* eslint-disable */
/* prettier-ignore */
{{#if imports}}

{{#each imports}}
import { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}
import { ApiError, catchGenericError } from '../core/ApiError';
import { request } from '../core/request';
import { isValidRequiredParam } from '../core/isValidRequiredParam';
import { OpenAPI } from '../core/OpenAPI';
import { Result } from '../core/Result';

export class {{{name}}} {
    {{#each operations}}
    /**
    {{#if deprecated}}
     * @deprecated
    {{/if}}
    {{#if summary}}
     * {{{summary}}}
    {{/if}}
    {{#if description}}
     * {{{description}}}
    {{/if}}
    {{#if parameters}}
    {{#each parameters}}
     * @param {{{name}}} {{{description}}}
    {{/each}}
    {{/if}}
     */
    public static async {{{name}}}({{#each parameters}}{{{name}}}{{#unless required}}?{{/unless}}: {{{type}}}{{#if nullable}} | null{{/if}}{{#unless @last}}, {{/unless}}{{/each}}): Promise<{{{result}}}> {
        {{#if parameters}}

        {{#each parameters}}
        {{#if required}}
        isValidRequiredParam({{{name}}}, '{{{name}}}');
        {{/if}}
        {{/each}}
        {{/if}}

        const result = await request({
            method: '{{{method}}}',
            path: `{{{path}}}`,
            {{#if parametersHeader}}
            headers: {
                {{#each parametersHeader}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersQuery}}
            query: {
                {{#each parametersQuery}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersForm}}
            formData: {
                {{#each parametersForm}}
                '{{{prop}}}': {{{name}}},
                {{/each}}
            },
            {{/if}}
            {{#if parametersBody}}
            body: {{{parametersBody.name}}},
            {{/if}}
        });
        {{#if errors}}

        if (!result.ok) {
            switch (result.status) {
            {{#each errors}}
                case {{{code}}}: throw new ApiError(result, `{{{text}}}`);
            {{/each}}
            }
        }
        {{/if}}

        catchGenericError(result);

        return result.body;
    }

    {{/each}}
}
