{{>header}}

import { HttpClient, HttpHeaders } from '@angular/common/http';
import type { HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';

import { ApiError } from './ApiError';
import type { ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import type { OpenAPIConfig } from './OpenAPI';

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/isFormData}}


{{>functions/base64}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>angular/getHeaders}}


{{>angular/getRequestBody}}


{{>angular/sendRequest}}


{{>angular/getResponseHeader}}


{{>angular/getResponseBody}}


{{>functions/catchErrors}}


/**
 * Request method
 * @param config The OpenAPI configuration object
 * @param http The Angular HTTP client
 * @param options The request options from the service
 * @returns CancelablePromise<T>
 * @throws ApiError
 */
export const request = <T>(config: OpenAPIConfig, http: HttpClient, options: ApiRequestOptions): Observable<T> => {
	return new Observable<T>(subscriber => {
		try {
			const url = getUrl(config, options);
			const formData = getFormData(options);
			const body = getRequestBody(options);
			getHeaders(config, options).then(headers => {

				sendRequest<T>(config, options, http, url, formData, body, headers)
					.subscribe(response => {
						const responseBody = getResponseBody(response);
						const responseHeader = getResponseHeader(response, options.responseHeader);

						const result: ApiResult = {
							url,
							ok: response.ok,
							status: response.status,
							statusText: response.statusText,
							body: responseHeader ?? responseBody,
						};

						catchErrors(options, result);

						subscriber.next(result.body);
					});
			});
		} catch (error) {
			subscriber.error(error);
		}
	});
};

