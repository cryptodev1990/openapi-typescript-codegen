{{>header}}

{{#equals @root.httpClient 'angular'}}
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import type { Observable } from 'rxjs';

{{/equals}}
{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{/if}}
{{#notEquals @root.httpClient 'angular'}}
import type { CancelablePromise } from '../core/CancelablePromise';
{{/notEquals}}
{{#if @root.exportClient}}
import type { BaseHttpRequest } from '../core/BaseHttpRequest';
{{else}}
import { OpenAPI } from '../core/OpenAPI';
import { request as __request } from '../core/request';
{{/if}}

{{#equals @root.httpClient 'angular'}}
@Injectable()
{{/equals}}
export class {{{name}}}{{{@root.postfix}}} {
	{{#if @root.exportClient}}

	constructor(private readonly httpRequest: BaseHttpRequest) {}
	{{/if}}
	{{#equals @root.httpClient 'angular'}}

	constructor(private readonly http: HttpClient) {}
	{{/equals}}

	{{#each operations}}
	/**
	{{#if deprecated}}
	 * @deprecated
	{{/if}}
	{{#if summary}}
	 * {{{escapeComment summary}}}
	{{/if}}
	{{#if description}}
	 * {{{escapeComment description}}}
	{{/if}}
	{{#unless @root.useOptions}}
	{{#if parameters}}
	{{#each parameters}}
	 * @param {{{name}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	{{/if}}
	{{/unless}}
	{{#each results}}
	 * @returns {{{type}}} {{#if description}}{{{escapeComment description}}}{{/if}}
	{{/each}}
	 * @throws ApiError
	 */
	{{#if @root.exportClient}}
	public {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return this.httpRequest.request({
	{{else}}
	{{#equals @root.httpClient 'angular'}}
	public {{{name}}}({{>parameters}}): Observable<{{>result}}> {
		return __request(OpenAPI, this.http, {
	{{else}}
	public static {{{name}}}({{>parameters}}): CancelablePromise<{{>result}}> {
		return __request(OpenAPI, {
	{{/equals}}
	{{/if}}
			method: '{{{method}}}',
			url: '{{{path}}}',
			{{#if parametersPath}}
			path: {
				{{#each parametersPath}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersCookie}}
			cookies: {
				{{#each parametersCookie}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersHeader}}
			headers: {
				{{#each parametersHeader}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersQuery}}
			query: {
				{{#each parametersQuery}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersForm}}
			formData: {
				{{#each parametersForm}}
				'{{{prop}}}': {{{name}}},
				{{/each}}
			},
			{{/if}}
			{{#if parametersBody}}
			{{#equals parametersBody.in 'formData'}}
			formData: {{{parametersBody.name}}},
			{{/equals}}
			{{#equals parametersBody.in 'body'}}
			body: {{{parametersBody.name}}},
			{{/equals}}
			{{#if parametersBody.mediaType}}
			mediaType: '{{{parametersBody.mediaType}}}',
			{{/if}}
			{{/if}}
			{{#if responseHeader}}
			responseHeader: '{{{responseHeader}}}',
			{{/if}}
			{{#if errors}}
			errors: {
				{{#each errors}}
				{{{code}}}: `{{{escapeDescription description}}}`,
				{{/each}}
			},
			{{/if}}
		});
	}

	{{/each}}
}
